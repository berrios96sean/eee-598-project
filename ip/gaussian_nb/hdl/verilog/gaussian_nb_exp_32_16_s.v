// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gaussian_nb_exp_32_16_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        x,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [31:0] x;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [4:0] f_x_msb_3_table_V_address0;
reg    f_x_msb_3_table_V_ce0;
wire   [31:0] f_x_msb_3_table_V_q0;
wire   [7:0] f_x_msb_2_table_V_address0;
reg    f_x_msb_2_table_V_ce0;
wire   [45:0] f_x_msb_2_table_V_q0;
wire   [7:0] exp_x_msb_1_table_V_address0;
reg    exp_x_msb_1_table_V_ce0;
wire   [49:0] exp_x_msb_1_table_V_q0;
reg   [0:0] p_Result_s_reg_755;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] p_Result_s_reg_755_pp0_iter1_reg;
reg   [0:0] p_Result_s_reg_755_pp0_iter2_reg;
reg   [6:0] tmp_reg_761;
wire   [7:0] tmp_49_fu_405_p4;
reg   [7:0] tmp_49_reg_766;
wire   [4:0] x_msb_ind_3_V_fu_415_p1;
reg   [4:0] x_msb_ind_3_V_reg_771;
wire   [0:0] or_ln300_1_fu_435_p2;
reg   [0:0] or_ln300_1_reg_786;
reg   [0:0] or_ln300_1_reg_786_pp0_iter1_reg;
reg   [0:0] or_ln300_1_reg_786_pp0_iter2_reg;
wire   [0:0] or_ln300_3_fu_447_p2;
reg   [0:0] or_ln300_3_reg_791;
reg   [0:0] or_ln300_3_reg_791_pp0_iter1_reg;
reg   [0:0] or_ln300_3_reg_791_pp0_iter2_reg;
wire   [0:0] or_ln300_6_fu_459_p2;
reg   [0:0] or_ln300_6_reg_796;
reg   [0:0] or_ln300_6_reg_796_pp0_iter1_reg;
reg   [0:0] or_ln300_6_reg_796_pp0_iter2_reg;
wire   [0:0] or_ln300_8_fu_471_p2;
reg   [0:0] or_ln300_8_reg_801;
reg   [0:0] or_ln300_8_reg_801_pp0_iter1_reg;
reg   [0:0] or_ln300_8_reg_801_pp0_iter2_reg;
wire   [46:0] rhs_2_fu_483_p5;
reg   [46:0] rhs_2_reg_806;
wire   [8:0] ret_V_4_fu_511_p2;
reg   [8:0] ret_V_4_reg_811;
wire   [40:0] trunc_ln640_2_fu_517_p1;
reg   [40:0] trunc_ln640_2_reg_816;
reg   [44:0] trunc_ln2_reg_821;
reg   [49:0] exp_x_msb_1_V_reg_831;
reg   [47:0] trunc_ln859_1_reg_836;
wire   [63:0] zext_ln587_fu_419_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln587_1_fu_424_p1;
wire   [63:0] zext_ln587_2_fu_553_p1;
wire   [15:0] trunc_ln640_fu_195_p1;
wire   [0:0] tmp_32_fu_215_p3;
wire   [0:0] tmp_33_fu_223_p3;
wire   [0:0] tmp_34_fu_237_p3;
wire   [0:0] tmp_35_fu_251_p3;
wire   [0:0] tmp_36_fu_265_p3;
wire   [0:0] tmp_37_fu_279_p3;
wire   [0:0] tmp_38_fu_293_p3;
wire   [0:0] tmp_39_fu_307_p3;
wire   [0:0] tmp_40_fu_321_p3;
wire   [0:0] tmp_41_fu_335_p3;
wire   [0:0] tmp_42_fu_349_p3;
wire   [0:0] tmp_43_fu_363_p3;
wire   [4:0] x_l_int_fu_185_p4;
wire   [22:0] x_l_fract_fu_199_p3;
wire   [0:0] icmp_ln1699_fu_377_p2;
wire   [0:0] icmp_ln1697_fu_383_p2;
wire   [0:0] overf_fu_231_p2;
wire   [0:0] xor_ln222_3_fu_259_p2;
wire   [0:0] or_ln300_fu_429_p2;
wire   [0:0] xor_ln222_2_fu_245_p2;
wire   [0:0] xor_ln222_fu_287_p2;
wire   [0:0] xor_ln222_5_fu_301_p2;
wire   [0:0] or_ln300_2_fu_441_p2;
wire   [0:0] xor_ln222_4_fu_273_p2;
wire   [0:0] xor_ln222_7_fu_329_p2;
wire   [0:0] xor_ln222_8_fu_343_p2;
wire   [0:0] or_ln300_5_fu_453_p2;
wire   [0:0] xor_ln222_6_fu_315_p2;
wire   [0:0] xor_ln222_10_fu_371_p2;
wire   [0:0] and_ln300_fu_389_p2;
wire   [0:0] or_ln300_7_fu_465_p2;
wire   [0:0] xor_ln222_9_fu_357_p2;
wire   [4:0] f_x_msb_2_h_V_fu_494_p4;
wire   [8:0] zext_ln859_2_fu_508_p1;
wire   [8:0] zext_ln859_1_fu_504_p1;
wire   [49:0] p_Result_10_fu_521_p3;
wire   [49:0] r_V_120_fu_537_p0;
wire   [46:0] r_V_120_fu_537_p1;
wire   [96:0] r_V_120_fu_537_p2;
wire   [7:0] p_Result_9_fu_477_p3;
wire   [55:0] rhs_1_fu_561_p4;
wire   [55:0] zext_ln1393_fu_558_p1;
wire   [55:0] ret_V_5_fu_569_p2;
wire   [55:0] zext_ln1393_1_fu_575_p1;
wire   [55:0] ret_V_fu_578_p2;
wire   [49:0] exp_x_msb_2_3_4_lsb_m_1_V_fu_584_p4;
wire   [49:0] r_V_fu_602_p0;
wire   [49:0] r_V_fu_602_p1;
wire   [99:0] r_V_fu_602_p2;
wire   [0:0] y_V_fu_618_p2;
wire   [49:0] zext_ln859_fu_631_p1;
wire   [49:0] y_l_V_fu_634_p2;
wire   [0:0] or_ln300_9_fu_653_p2;
wire   [0:0] or_ln300_4_fu_649_p2;
wire   [0:0] or_ln300_10_fu_657_p2;
wire   [45:0] select_ln288_fu_623_p3;
wire   [45:0] y_V_1_fu_639_p4;
wire   [45:0] y_V_3_fu_663_p3;
wire   [1:0] tmp_45_fu_671_p4;
wire   [0:0] overf_1_fu_681_p2;
wire   [0:0] p_Result_8_fu_695_p3;
wire   [0:0] or_ln533_fu_703_p2;
wire   [0:0] p_Result_7_fu_687_p3;
wire   [3:0] tmp_48_fu_715_p4;
wire   [0:0] icmp_ln533_fu_725_p2;
wire   [0:0] or_ln533_1_fu_709_p2;
wire   [0:0] overf_2_fu_731_p2;
wire   [31:0] tmp_s_fu_737_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [96:0] r_V_120_fu_537_p00;
wire   [96:0] r_V_120_fu_537_p10;
wire   [99:0] r_V_fu_602_p00;
wire   [99:0] r_V_fu_602_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

gaussian_nb_exp_32_16_s_f_x_msb_3_table_V_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
f_x_msb_3_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_x_msb_3_table_V_address0),
    .ce0(f_x_msb_3_table_V_ce0),
    .q0(f_x_msb_3_table_V_q0)
);

gaussian_nb_exp_32_16_s_f_x_msb_2_table_V_ROM_AUTO_1R #(
    .DataWidth( 46 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
f_x_msb_2_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_x_msb_2_table_V_address0),
    .ce0(f_x_msb_2_table_V_ce0),
    .q0(f_x_msb_2_table_V_q0)
);

gaussian_nb_exp_32_16_s_exp_x_msb_1_table_V_ROM_AUTO_1R #(
    .DataWidth( 50 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
exp_x_msb_1_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_1_table_V_address0),
    .ce0(exp_x_msb_1_table_V_ce0),
    .q0(exp_x_msb_1_table_V_q0)
);

gaussian_nb_mul_50ns_47ns_97_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 50 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 97 ))
mul_50ns_47ns_97_1_1_U1(
    .din0(r_V_120_fu_537_p0),
    .din1(r_V_120_fu_537_p1),
    .dout(r_V_120_fu_537_p2)
);

gaussian_nb_mul_50ns_50ns_100_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 50 ),
    .din1_WIDTH( 50 ),
    .dout_WIDTH( 100 ))
mul_50ns_50ns_100_1_1_U2(
    .din0(r_V_fu_602_p0),
    .din1(r_V_fu_602_p1),
    .dout(r_V_fu_602_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        exp_x_msb_1_V_reg_831 <= exp_x_msb_1_table_V_q0;
        or_ln300_1_reg_786_pp0_iter2_reg <= or_ln300_1_reg_786_pp0_iter1_reg;
        or_ln300_3_reg_791_pp0_iter2_reg <= or_ln300_3_reg_791_pp0_iter1_reg;
        or_ln300_6_reg_796_pp0_iter2_reg <= or_ln300_6_reg_796_pp0_iter1_reg;
        or_ln300_8_reg_801_pp0_iter2_reg <= or_ln300_8_reg_801_pp0_iter1_reg;
        p_Result_s_reg_755_pp0_iter2_reg <= p_Result_s_reg_755_pp0_iter1_reg;
        trunc_ln859_1_reg_836 <= {{r_V_fu_602_p2[99:52]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln300_1_reg_786 <= or_ln300_1_fu_435_p2;
        or_ln300_1_reg_786_pp0_iter1_reg <= or_ln300_1_reg_786;
        or_ln300_3_reg_791 <= or_ln300_3_fu_447_p2;
        or_ln300_3_reg_791_pp0_iter1_reg <= or_ln300_3_reg_791;
        or_ln300_6_reg_796 <= or_ln300_6_fu_459_p2;
        or_ln300_6_reg_796_pp0_iter1_reg <= or_ln300_6_reg_796;
        or_ln300_8_reg_801 <= or_ln300_8_fu_471_p2;
        or_ln300_8_reg_801_pp0_iter1_reg <= or_ln300_8_reg_801;
        p_Result_s_reg_755 <= x[32'd31];
        p_Result_s_reg_755_pp0_iter1_reg <= p_Result_s_reg_755;
        ret_V_4_reg_811 <= ret_V_4_fu_511_p2;
        rhs_2_reg_806[34 : 3] <= rhs_2_fu_483_p5[34 : 3];
rhs_2_reg_806[46 : 42] <= rhs_2_fu_483_p5[46 : 42];
        tmp_49_reg_766 <= {{x[12:5]}};
        tmp_reg_761 <= {{x[19:13]}};
        trunc_ln2_reg_821 <= {{r_V_120_fu_537_p2[96:52]}};
        trunc_ln640_2_reg_816 <= trunc_ln640_2_fu_517_p1;
        x_msb_ind_3_V_reg_771 <= x_msb_ind_3_V_fu_415_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_x_msb_1_table_V_ce0 = 1'b1;
    end else begin
        exp_x_msb_1_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_x_msb_2_table_V_ce0 = 1'b1;
    end else begin
        f_x_msb_2_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_x_msb_3_table_V_ce0 = 1'b1;
    end else begin
        f_x_msb_3_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln300_fu_389_p2 = (icmp_ln1699_fu_377_p2 & icmp_ln1697_fu_383_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((overf_2_fu_731_p2[0:0] == 1'b1) ? 32'd2147483647 : tmp_s_fu_737_p4);

assign exp_x_msb_1_table_V_address0 = zext_ln587_2_fu_553_p1;

assign exp_x_msb_2_3_4_lsb_m_1_V_fu_584_p4 = {{ret_V_fu_578_p2[55:6]}};

assign f_x_msb_2_h_V_fu_494_p4 = {{f_x_msb_2_table_V_q0[45:41]}};

assign f_x_msb_2_table_V_address0 = zext_ln587_1_fu_424_p1;

assign f_x_msb_3_table_V_address0 = zext_ln587_fu_419_p1;

assign icmp_ln1697_fu_383_p2 = ((x_l_fract_fu_199_p3 > 23'd7905299) ? 1'b1 : 1'b0);

assign icmp_ln1699_fu_377_p2 = ((x_l_int_fu_185_p4 == 5'd15) ? 1'b1 : 1'b0);

assign icmp_ln533_fu_725_p2 = ((tmp_48_fu_715_p4 != 4'd0) ? 1'b1 : 1'b0);

assign or_ln300_10_fu_657_p2 = (or_ln300_9_fu_653_p2 | or_ln300_4_fu_649_p2);

assign or_ln300_1_fu_435_p2 = (xor_ln222_2_fu_245_p2 | or_ln300_fu_429_p2);

assign or_ln300_2_fu_441_p2 = (xor_ln222_fu_287_p2 | xor_ln222_5_fu_301_p2);

assign or_ln300_3_fu_447_p2 = (xor_ln222_4_fu_273_p2 | or_ln300_2_fu_441_p2);

assign or_ln300_4_fu_649_p2 = (or_ln300_3_reg_791_pp0_iter2_reg | or_ln300_1_reg_786_pp0_iter2_reg);

assign or_ln300_5_fu_453_p2 = (xor_ln222_8_fu_343_p2 | xor_ln222_7_fu_329_p2);

assign or_ln300_6_fu_459_p2 = (xor_ln222_6_fu_315_p2 | or_ln300_5_fu_453_p2);

assign or_ln300_7_fu_465_p2 = (xor_ln222_10_fu_371_p2 | and_ln300_fu_389_p2);

assign or_ln300_8_fu_471_p2 = (xor_ln222_9_fu_357_p2 | or_ln300_7_fu_465_p2);

assign or_ln300_9_fu_653_p2 = (or_ln300_8_reg_801_pp0_iter2_reg | or_ln300_6_reg_796_pp0_iter2_reg);

assign or_ln300_fu_429_p2 = (xor_ln222_3_fu_259_p2 | overf_fu_231_p2);

assign or_ln533_1_fu_709_p2 = (p_Result_7_fu_687_p3 | or_ln533_fu_703_p2);

assign or_ln533_fu_703_p2 = (p_Result_8_fu_695_p3 | overf_1_fu_681_p2);

assign overf_1_fu_681_p2 = ((tmp_45_fu_671_p4 != 2'd0) ? 1'b1 : 1'b0);

assign overf_2_fu_731_p2 = (or_ln533_1_fu_709_p2 | icmp_ln533_fu_725_p2);

assign overf_fu_231_p2 = (tmp_33_fu_223_p3 ^ tmp_32_fu_215_p3);

assign p_Result_10_fu_521_p3 = {{ret_V_4_fu_511_p2}, {trunc_ln640_2_fu_517_p1}};

assign p_Result_7_fu_687_p3 = y_V_3_fu_663_p3[32'd43];

assign p_Result_8_fu_695_p3 = y_V_3_fu_663_p3[32'd42];

assign p_Result_9_fu_477_p3 = {{p_Result_s_reg_755}, {tmp_reg_761}};

assign r_V_120_fu_537_p0 = r_V_120_fu_537_p00;

assign r_V_120_fu_537_p00 = p_Result_10_fu_521_p3;

assign r_V_120_fu_537_p1 = r_V_120_fu_537_p10;

assign r_V_120_fu_537_p10 = rhs_2_fu_483_p5;

assign r_V_fu_602_p0 = r_V_fu_602_p00;

assign r_V_fu_602_p00 = exp_x_msb_2_3_4_lsb_m_1_V_fu_584_p4;

assign r_V_fu_602_p1 = r_V_fu_602_p10;

assign r_V_fu_602_p10 = exp_x_msb_1_table_V_q0;

assign ret_V_4_fu_511_p2 = (zext_ln859_2_fu_508_p1 + zext_ln859_1_fu_504_p1);

assign ret_V_5_fu_569_p2 = (rhs_1_fu_561_p4 + zext_ln1393_fu_558_p1);

assign ret_V_fu_578_p2 = (ret_V_5_fu_569_p2 + zext_ln1393_1_fu_575_p1);

assign rhs_1_fu_561_p4 = {{{ret_V_4_reg_811}, {trunc_ln640_2_reg_816}}, {6'd0}};

assign rhs_2_fu_483_p5 = {{{{x_msb_ind_3_V_reg_771}, {7'd0}}, {f_x_msb_3_table_V_q0}}, {3'd0}};

assign select_ln288_fu_623_p3 = ((y_V_fu_618_p2[0:0] == 1'b1) ? 46'd70368744177663 : 46'd0);

assign tmp_32_fu_215_p3 = x[32'd31];

assign tmp_33_fu_223_p3 = x[32'd20];

assign tmp_34_fu_237_p3 = x[32'd21];

assign tmp_35_fu_251_p3 = x[32'd22];

assign tmp_36_fu_265_p3 = x[32'd23];

assign tmp_37_fu_279_p3 = x[32'd24];

assign tmp_38_fu_293_p3 = x[32'd25];

assign tmp_39_fu_307_p3 = x[32'd26];

assign tmp_40_fu_321_p3 = x[32'd27];

assign tmp_41_fu_335_p3 = x[32'd28];

assign tmp_42_fu_349_p3 = x[32'd29];

assign tmp_43_fu_363_p3 = x[32'd30];

assign tmp_45_fu_671_p4 = {{y_V_3_fu_663_p3[45:44]}};

assign tmp_48_fu_715_p4 = {{y_V_3_fu_663_p3[41:38]}};

assign tmp_49_fu_405_p4 = {{x[12:5]}};

assign tmp_s_fu_737_p4 = {{y_V_3_fu_663_p3[38:7]}};

assign trunc_ln640_2_fu_517_p1 = f_x_msb_2_table_V_q0[40:0];

assign trunc_ln640_fu_195_p1 = x[15:0];

assign x_l_fract_fu_199_p3 = {{trunc_ln640_fu_195_p1}, {7'd0}};

assign x_l_int_fu_185_p4 = {{x[20:16]}};

assign x_msb_ind_3_V_fu_415_p1 = x[4:0];

assign xor_ln222_10_fu_371_p2 = (tmp_43_fu_363_p3 ^ tmp_32_fu_215_p3);

assign xor_ln222_2_fu_245_p2 = (tmp_34_fu_237_p3 ^ tmp_32_fu_215_p3);

assign xor_ln222_3_fu_259_p2 = (tmp_35_fu_251_p3 ^ tmp_32_fu_215_p3);

assign xor_ln222_4_fu_273_p2 = (tmp_36_fu_265_p3 ^ tmp_32_fu_215_p3);

assign xor_ln222_5_fu_301_p2 = (tmp_38_fu_293_p3 ^ tmp_32_fu_215_p3);

assign xor_ln222_6_fu_315_p2 = (tmp_39_fu_307_p3 ^ tmp_32_fu_215_p3);

assign xor_ln222_7_fu_329_p2 = (tmp_40_fu_321_p3 ^ tmp_32_fu_215_p3);

assign xor_ln222_8_fu_343_p2 = (tmp_41_fu_335_p3 ^ tmp_32_fu_215_p3);

assign xor_ln222_9_fu_357_p2 = (tmp_42_fu_349_p3 ^ tmp_32_fu_215_p3);

assign xor_ln222_fu_287_p2 = (tmp_37_fu_279_p3 ^ tmp_32_fu_215_p3);

assign y_V_1_fu_639_p4 = {{y_l_V_fu_634_p2[49:4]}};

assign y_V_3_fu_663_p3 = ((or_ln300_10_fu_657_p2[0:0] == 1'b1) ? select_ln288_fu_623_p3 : y_V_1_fu_639_p4);

assign y_V_fu_618_p2 = (p_Result_s_reg_755_pp0_iter2_reg ^ 1'd1);

assign y_l_V_fu_634_p2 = (exp_x_msb_1_V_reg_831 + zext_ln859_fu_631_p1);

assign zext_ln1393_1_fu_575_p1 = rhs_2_reg_806;

assign zext_ln1393_fu_558_p1 = trunc_ln2_reg_821;

assign zext_ln587_1_fu_424_p1 = tmp_49_fu_405_p4;

assign zext_ln587_2_fu_553_p1 = p_Result_9_fu_477_p3;

assign zext_ln587_fu_419_p1 = x_msb_ind_3_V_fu_415_p1;

assign zext_ln859_1_fu_504_p1 = f_x_msb_2_h_V_fu_494_p4;

assign zext_ln859_2_fu_508_p1 = tmp_49_reg_766;

assign zext_ln859_fu_631_p1 = trunc_ln859_1_reg_836;

always @ (posedge ap_clk) begin
    rhs_2_reg_806[2:0] <= 3'b000;
    rhs_2_reg_806[41:35] <= 7'b0000000;
end

endmodule //gaussian_nb_exp_32_16_s
