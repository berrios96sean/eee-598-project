// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mlp_Block_if_end_i_i126_9218247_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [30:0] p_read;
input  [55:0] p_read1;
input  [55:0] p_read2;
input  [55:0] p_read3;
input  [55:0] p_read4;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [55:0] r_V_fu_66_p2;
reg   [55:0] r_V_reg_212;
wire   [55:0] r_V_12_fu_72_p2;
reg   [55:0] r_V_12_reg_217;
wire   [55:0] r_V_13_fu_78_p2;
reg   [55:0] r_V_13_reg_222;
wire   [55:0] r_V_14_fu_84_p2;
reg   [55:0] r_V_14_reg_227;
reg    ap_block_state1;
wire   [27:0] r_V_fu_66_p1;
wire  signed [27:0] r_V_12_fu_72_p1;
wire  signed [26:0] r_V_13_fu_78_p1;
wire  signed [28:0] r_V_14_fu_84_p1;
wire    ap_CS_fsm_state2;
wire   [55:0] ret_V_fu_93_p2;
wire   [31:0] tmp_fu_98_p4;
wire   [55:0] lhs_V_fu_108_p3;
wire   [55:0] ret_V_11_fu_116_p2;
wire   [31:0] tmp_s_fu_121_p4;
wire   [55:0] lhs_V_10_fu_131_p3;
wire   [55:0] ret_V_12_fu_139_p2;
wire   [31:0] tmp_8_fu_144_p4;
wire   [55:0] lhs_V_11_fu_154_p3;
wire   [55:0] ret_V_13_fu_162_p2;
wire   [31:0] tmp_9_fu_167_p4;
wire   [30:0] r_V_15_fu_185_p0;
wire  signed [26:0] r_V_15_fu_185_p1;
wire   [55:0] lhs_V_12_fu_177_p3;
wire   [55:0] r_V_15_fu_185_p2;
wire   [55:0] ret_V_14_fu_191_p2;
reg   [31:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire   [55:0] r_V_15_fu_185_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 32'd0;
end

mlp_mul_56s_28ns_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 56 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 56 ))
mul_56s_28ns_56_1_1_U145(
    .din0(p_read1),
    .din1(r_V_fu_66_p1),
    .dout(r_V_fu_66_p2)
);

mlp_mul_56s_28s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 56 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 56 ))
mul_56s_28s_56_1_1_U146(
    .din0(p_read2),
    .din1(r_V_12_fu_72_p1),
    .dout(r_V_12_fu_72_p2)
);

mlp_mul_56s_27s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 56 ),
    .din1_WIDTH( 27 ),
    .dout_WIDTH( 56 ))
mul_56s_27s_56_1_1_U147(
    .din0(p_read3),
    .din1(r_V_13_fu_78_p1),
    .dout(r_V_13_fu_78_p2)
);

mlp_mul_56s_29s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 56 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 56 ))
mul_56s_29s_56_1_1_U148(
    .din0(p_read4),
    .din1(r_V_14_fu_84_p1),
    .dout(r_V_14_fu_84_p2)
);

mlp_mul_31ns_27s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 27 ),
    .dout_WIDTH( 56 ))
mul_31ns_27s_56_1_1_U149(
    .din0(r_V_15_fu_185_p0),
    .din1(r_V_15_fu_185_p1),
    .dout(r_V_15_fu_185_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= {{ret_V_14_fu_191_p2[55:24]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        r_V_12_reg_217 <= r_V_12_fu_72_p2;
        r_V_13_reg_222 <= r_V_13_fu_78_p2;
        r_V_14_reg_227 <= r_V_14_fu_84_p2;
        r_V_reg_212 <= r_V_fu_66_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = {{ret_V_14_fu_191_p2[55:24]}};
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign lhs_V_10_fu_131_p3 = {{tmp_s_fu_121_p4}, {24'd0}};

assign lhs_V_11_fu_154_p3 = {{tmp_8_fu_144_p4}, {24'd0}};

assign lhs_V_12_fu_177_p3 = {{tmp_9_fu_167_p4}, {24'd0}};

assign lhs_V_fu_108_p3 = {{tmp_fu_98_p4}, {24'd0}};

assign r_V_12_fu_72_p1 = 56'd72057593954695168;

assign r_V_13_fu_78_p1 = 56'd72057593991574634;

assign r_V_14_fu_84_p1 = 56'd72057593893635889;

assign r_V_15_fu_185_p0 = r_V_15_fu_185_p00;

assign r_V_15_fu_185_p00 = p_read;

assign r_V_15_fu_185_p1 = 56'd72057593972720776;

assign r_V_fu_66_p1 = 56'd89020918;

assign ret_V_11_fu_116_p2 = (lhs_V_fu_108_p3 + r_V_12_reg_217);

assign ret_V_12_fu_139_p2 = (lhs_V_10_fu_131_p3 + r_V_13_reg_222);

assign ret_V_13_fu_162_p2 = (lhs_V_11_fu_154_p3 + r_V_14_reg_227);

assign ret_V_14_fu_191_p2 = (lhs_V_12_fu_177_p3 + r_V_15_fu_185_p2);

assign ret_V_fu_93_p2 = (r_V_reg_212 + 56'd243377626939392);

assign tmp_8_fu_144_p4 = {{ret_V_12_fu_139_p2[55:24]}};

assign tmp_9_fu_167_p4 = {{ret_V_13_fu_162_p2[55:24]}};

assign tmp_fu_98_p4 = {{ret_V_fu_93_p2[55:24]}};

assign tmp_s_fu_121_p4 = {{ret_V_11_fu_116_p2[55:24]}};

endmodule //mlp_Block_if_end_i_i126_9218247_proc
