-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp_Block_if_end_i_i126_9218249_proc13 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (30 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of mlp_Block_if_end_i_i126_9218249_proc13 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_Result_22_fu_118_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_22_reg_443 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_132_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_V_reg_448 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1086_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1086_reg_454 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_15_reg_459 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln1122_fu_370_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1122_reg_464 : STD_LOGIC_VECTOR (10 downto 0);
    signal notrhs_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal notlhs_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_480 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_113_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_16_fu_126_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1088_fu_146_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_23_fu_149_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_159_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1095_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_179_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1098_fu_195_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1098_fu_199_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1098_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1098_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1097_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1098_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_233_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1100_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1100_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1100_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1109_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1108_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1109_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1110_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1110_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1109_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln1109_fu_294_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1110_fu_310_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_267_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_13_fu_316_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1112_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_14_fu_328_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_20_fu_344_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1094_fu_360_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1116_fu_364_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1094_fu_352_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_376_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln1113_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_395_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_24_fu_401_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_115_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal predicted_class_V_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_113_ce : STD_LOGIC;
    signal regslice_both_out_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state5 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal out_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal out_stream_TVALID_int_regslice : STD_LOGIC;
    signal out_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_stream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_stream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_stream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_stream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mlp_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mlp_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    dcmp_64ns_64ns_1_2_no_dsp_1_U166 : component mlp_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_113_p0,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => grp_fu_113_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_113_p2);

    regslice_both_out_stream_V_data_V_U : component mlp_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => out_stream_TDATA_int_regslice,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => out_stream_TREADY_int_regslice,
        data_out => out_stream_TDATA,
        vld_out => regslice_both_out_stream_V_data_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_data_V_U_apdone_blk);

    regslice_both_out_stream_V_keep_V_U : component mlp_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv2_0,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => regslice_both_out_stream_V_keep_V_U_ack_in_dummy,
        data_out => out_stream_TKEEP,
        vld_out => regslice_both_out_stream_V_keep_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_keep_V_U_apdone_blk);

    regslice_both_out_stream_V_strb_V_U : component mlp_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv2_0,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => regslice_both_out_stream_V_strb_V_U_ack_in_dummy,
        data_out => out_stream_TSTRB,
        vld_out => regslice_both_out_stream_V_strb_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_strb_V_U_apdone_blk);

    regslice_both_out_stream_V_last_V_U : component mlp_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_1,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => regslice_both_out_stream_V_last_V_U_ack_in_dummy,
        data_out => out_stream_TLAST,
        vld_out => regslice_both_out_stream_V_last_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln1122_reg_464 <= add_ln1122_fu_370_p2;
                m_15_reg_459 <= m_14_fu_328_p2(63 downto 1);
                notrhs_reg_470 <= notrhs_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln1086_reg_454 <= icmp_ln1086_fu_140_p2;
                p_Result_22_reg_443 <= p_read(30 downto 30);
                tmp_V_reg_448 <= tmp_V_fu_132_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                notlhs_reg_480 <= notlhs_fu_418_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, regslice_both_out_stream_V_data_V_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((out_stream_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    a_fu_227_p2 <= (icmp_ln1098_fu_221_p2 and icmp_ln1097_fu_189_p2);
    add_ln1109_fu_284_p2 <= std_logic_vector(unsigned(sub_ln1095_fu_167_p2) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln1122_fu_370_p2 <= std_logic_vector(unsigned(sub_ln1116_fu_364_p2) + unsigned(select_ln1094_fu_352_p3));
    and_ln1100_fu_255_p2 <= (xor_ln1100_fu_241_p2 and p_Result_19_fu_247_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(out_stream_TREADY_int_regslice)
    begin
        if ((out_stream_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(regslice_both_out_stream_V_data_V_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
        if (((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(regslice_both_out_stream_V_data_V_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
                ap_block_state5 <= ((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, regslice_both_out_stream_V_data_V_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
        if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, regslice_both_out_stream_V_data_V_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
        if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_115_fu_427_p2 <= (grp_fu_113_p2 and empty_fu_423_p2);
    empty_fu_423_p2 <= (notrhs_reg_470 or notlhs_reg_480);

    grp_fu_113_ce_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, out_stream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((out_stream_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_fu_113_ce <= ap_const_logic_1;
        else 
            grp_fu_113_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_113_p0 <= p_Result_24_fu_401_p5;
    icmp_ln1086_fu_140_p2 <= "0" when (p_read = ap_const_lv31_0) else "1";
    icmp_ln1097_fu_189_p2 <= "1" when (signed(tmp_12_fu_179_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1098_fu_221_p2 <= "0" when (p_Result_s_fu_215_p2 = ap_const_lv32_0) else "1";
    icmp_ln1109_fu_278_p2 <= "1" when (signed(lsb_index_fu_173_p2) > signed(ap_const_lv32_0)) else "0";
    
    l_fu_159_p3_proc : process(p_Result_23_fu_149_p4)
    begin
        l_fu_159_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_23_fu_149_p4(i) = '1' then
                l_fu_159_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_173_p2 <= std_logic_vector(unsigned(sub_ln1095_fu_167_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lshr_ln1098_fu_209_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln1098_fu_205_p1(31-1 downto 0)))));
    lshr_ln1109_fu_294_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1108_fu_275_p1),to_integer(unsigned('0' & zext_ln1109_fu_290_p1(31-1 downto 0)))));
    m_13_fu_316_p3 <= 
        lshr_ln1109_fu_294_p2 when (icmp_ln1109_fu_278_p2(0) = '1') else 
        shl_ln1110_fu_310_p2;
    m_14_fu_328_p2 <= std_logic_vector(unsigned(m_13_fu_316_p3) + unsigned(zext_ln1112_fu_324_p1));
    notlhs_fu_418_p2 <= "0" when (add_ln1122_reg_464 = ap_const_lv11_7FF) else "1";
    notrhs_fu_386_p2 <= "1" when (tmp_7_fu_376_p4 = ap_const_lv52_0) else "0";
    or_ln1100_fu_261_p2 <= (and_ln1100_fu_255_p2 or a_fu_227_p2);
    or_ln_fu_267_p3 <= (ap_const_lv1_0 & or_ln1100_fu_261_p2);

    out_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, out_stream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out_stream_TDATA_blk_n <= out_stream_TREADY_int_regslice;
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(predicted_class_V_fu_433_p2),16));
    out_stream_TVALID <= regslice_both_out_stream_V_data_V_U_vld_out;

    out_stream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state4, out_stream_TREADY_int_regslice)
    begin
        if (((out_stream_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_19_fu_247_p3 <= zext_ln1088_fu_146_p1(to_integer(unsigned(lsb_index_fu_173_p2)) downto to_integer(unsigned(lsb_index_fu_173_p2))) when (to_integer(unsigned(lsb_index_fu_173_p2)) >= 0 and to_integer(unsigned(lsb_index_fu_173_p2)) <=31) else "-";
    p_Result_20_fu_344_p3 <= m_14_fu_328_p2(54 downto 54);
    p_Result_22_fu_118_p3 <= p_read(30 downto 30);
    
    p_Result_23_fu_149_p4_proc : process(zext_ln1088_fu_146_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_23_fu_149_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := zext_ln1088_fu_146_p1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_23_fu_149_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_23_fu_149_p4_i) := zext_ln1088_fu_146_p1(32-1-p_Result_23_fu_149_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_23_fu_149_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_24_fu_401_p5 <= (tmp_s_fu_395_p3 & zext_ln1113_fu_392_p1(51 downto 0));
    p_Result_s_fu_215_p2 <= (zext_ln1088_fu_146_p1 and lshr_ln1098_fu_209_p2);
    predicted_class_V_fu_433_p2 <= (icmp_ln1086_reg_454 and empty_115_fu_427_p2);
    select_ln1094_fu_352_p3 <= 
        ap_const_lv11_3FF when (p_Result_20_fu_344_p3(0) = '1') else 
        ap_const_lv11_3FE;
    shl_ln1110_fu_310_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1108_fu_275_p1),to_integer(unsigned('0' & zext_ln1110_fu_306_p1(31-1 downto 0)))));
    sub_ln1095_fu_167_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_fu_159_p3));
    sub_ln1098_fu_199_p2 <= std_logic_vector(unsigned(ap_const_lv6_16) - unsigned(trunc_ln1098_fu_195_p1));
    sub_ln1110_fu_300_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln1095_fu_167_p2));
    sub_ln1116_fu_364_p2 <= std_logic_vector(unsigned(ap_const_lv11_8) - unsigned(trunc_ln1094_fu_360_p1));
    tmp_12_fu_179_p4 <= lsb_index_fu_173_p2(31 downto 1);
    tmp_13_fu_233_p3 <= lsb_index_fu_173_p2(31 downto 31);
    tmp_7_fu_376_p4 <= m_14_fu_328_p2(52 downto 1);
    tmp_V_16_fu_126_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(p_read));
    tmp_V_fu_132_p3 <= 
        tmp_V_16_fu_126_p2 when (p_Result_22_fu_118_p3(0) = '1') else 
        p_read;
    tmp_s_fu_395_p3 <= (p_Result_22_reg_443 & add_ln1122_reg_464);
    trunc_ln1094_fu_360_p1 <= l_fu_159_p3(11 - 1 downto 0);
    trunc_ln1098_fu_195_p1 <= sub_ln1095_fu_167_p2(6 - 1 downto 0);
    xor_ln1100_fu_241_p2 <= (tmp_13_fu_233_p3 xor ap_const_lv1_1);
    zext_ln1088_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_448),32));
    zext_ln1098_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1098_fu_199_p2),32));
    zext_ln1108_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_448),64));
    zext_ln1109_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1109_fu_284_p2),64));
    zext_ln1110_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1110_fu_300_p2),64));
    zext_ln1112_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_267_p3),64));
    zext_ln1113_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_15_reg_459),64));
end behav;
