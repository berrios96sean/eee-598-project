-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp_Block_if_end_i_i126_9218247_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (30 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (55 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (55 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (55 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (55 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mlp_Block_if_end_i_i126_9218247_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv56_54E59F6 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000101010011100101100111110110";
    constant ap_const_lv56_FFFFFFFB09F800 : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111011000010011111100000000000";
    constant ap_const_lv56_FFFFFFFD3CB46A : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111101001111001011010001101010";
    constant ap_const_lv56_FFFFFFF7664731 : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111110111011001100100011100110001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv56_DD59C5000000 : STD_LOGIC_VECTOR (55 downto 0) := "00000000110111010101100111000101000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv56_FFFFFFFC1D0488 : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111100000111010000010010001000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r_V_fu_66_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_reg_212 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_12_fu_72_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_12_reg_217 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_13_fu_78_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_13_reg_222 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_14_fu_84_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_14_reg_227 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal r_V_fu_66_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_12_fu_72_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_13_fu_78_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_14_fu_84_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ret_V_fu_93_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_fu_98_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_108_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_11_fu_116_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_s_fu_121_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_10_fu_131_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_12_fu_139_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_8_fu_144_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_11_fu_154_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_13_fu_162_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_9_fu_167_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_15_fu_185_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_15_fu_185_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal lhs_V_12_fu_177_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_15_fu_185_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_14_fu_191_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal r_V_15_fu_185_p00 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mlp_mul_56s_28ns_56_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component mlp_mul_56s_28s_56_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component mlp_mul_56s_27s_56_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component mlp_mul_56s_29s_56_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component mlp_mul_31ns_27s_56_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;



begin
    mul_56s_28ns_56_1_1_U145 : component mlp_mul_56s_28ns_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 56,
        din1_WIDTH => 28,
        dout_WIDTH => 56)
    port map (
        din0 => p_read1,
        din1 => r_V_fu_66_p1,
        dout => r_V_fu_66_p2);

    mul_56s_28s_56_1_1_U146 : component mlp_mul_56s_28s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 56,
        din1_WIDTH => 28,
        dout_WIDTH => 56)
    port map (
        din0 => p_read2,
        din1 => r_V_12_fu_72_p1,
        dout => r_V_12_fu_72_p2);

    mul_56s_27s_56_1_1_U147 : component mlp_mul_56s_27s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 56,
        din1_WIDTH => 27,
        dout_WIDTH => 56)
    port map (
        din0 => p_read3,
        din1 => r_V_13_fu_78_p1,
        dout => r_V_13_fu_78_p2);

    mul_56s_29s_56_1_1_U148 : component mlp_mul_56s_29s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 56,
        din1_WIDTH => 29,
        dout_WIDTH => 56)
    port map (
        din0 => p_read4,
        din1 => r_V_14_fu_84_p1,
        dout => r_V_14_fu_84_p2);

    mul_31ns_27s_56_1_1_U149 : component mlp_mul_31ns_27s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 27,
        dout_WIDTH => 56)
    port map (
        din0 => r_V_15_fu_185_p0,
        din1 => r_V_15_fu_185_p1,
        dout => r_V_15_fu_185_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_preg <= ret_V_14_fu_191_p2(55 downto 24);
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                r_V_12_reg_217 <= r_V_12_fu_72_p2;
                r_V_13_reg_222 <= r_V_13_fu_78_p2;
                r_V_14_reg_227 <= r_V_14_fu_84_p2;
                r_V_reg_212 <= r_V_fu_66_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, ret_V_14_fu_191_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return <= ret_V_14_fu_191_p2(55 downto 24);
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    lhs_V_10_fu_131_p3 <= (tmp_s_fu_121_p4 & ap_const_lv24_0);
    lhs_V_11_fu_154_p3 <= (tmp_8_fu_144_p4 & ap_const_lv24_0);
    lhs_V_12_fu_177_p3 <= (tmp_9_fu_167_p4 & ap_const_lv24_0);
    lhs_V_fu_108_p3 <= (tmp_fu_98_p4 & ap_const_lv24_0);
    r_V_12_fu_72_p1 <= ap_const_lv56_FFFFFFFB09F800(28 - 1 downto 0);
    r_V_13_fu_78_p1 <= ap_const_lv56_FFFFFFFD3CB46A(27 - 1 downto 0);
    r_V_14_fu_84_p1 <= ap_const_lv56_FFFFFFF7664731(29 - 1 downto 0);
    r_V_15_fu_185_p0 <= r_V_15_fu_185_p00(31 - 1 downto 0);
    r_V_15_fu_185_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),56));
    r_V_15_fu_185_p1 <= ap_const_lv56_FFFFFFFC1D0488(27 - 1 downto 0);
    r_V_fu_66_p1 <= ap_const_lv56_54E59F6(28 - 1 downto 0);
    ret_V_11_fu_116_p2 <= std_logic_vector(unsigned(lhs_V_fu_108_p3) + unsigned(r_V_12_reg_217));
    ret_V_12_fu_139_p2 <= std_logic_vector(unsigned(lhs_V_10_fu_131_p3) + unsigned(r_V_13_reg_222));
    ret_V_13_fu_162_p2 <= std_logic_vector(unsigned(lhs_V_11_fu_154_p3) + unsigned(r_V_14_reg_227));
    ret_V_14_fu_191_p2 <= std_logic_vector(unsigned(lhs_V_12_fu_177_p3) + unsigned(r_V_15_fu_185_p2));
    ret_V_fu_93_p2 <= std_logic_vector(unsigned(r_V_reg_212) + unsigned(ap_const_lv56_DD59C5000000));
    tmp_8_fu_144_p4 <= ret_V_12_fu_139_p2(55 downto 24);
    tmp_9_fu_167_p4 <= ret_V_13_fu_162_p2(55 downto 24);
    tmp_fu_98_p4 <= ret_V_fu_93_p2(55 downto 24);
    tmp_s_fu_121_p4 <= ret_V_11_fu_116_p2(55 downto 24);
end behav;
