-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp_Block_if_end_i_i126_9218229_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (30 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (45 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (44 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (41 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (44 downto 0);
    shl_ln887_4_cast11_loc_dout : IN STD_LOGIC_VECTOR (42 downto 0);
    shl_ln887_4_cast11_loc_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    shl_ln887_4_cast11_loc_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    shl_ln887_4_cast11_loc_empty_n : IN STD_LOGIC;
    shl_ln887_4_cast11_loc_read : OUT STD_LOGIC;
    p_read5 : IN STD_LOGIC_VECTOR (43 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (45 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (40 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (42 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (44 downto 0);
    shl_ln887_6_cast18_loc_c_din : OUT STD_LOGIC_VECTOR (45 downto 0);
    shl_ln887_6_cast18_loc_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    shl_ln887_6_cast18_loc_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    shl_ln887_6_cast18_loc_c_full_n : IN STD_LOGIC;
    shl_ln887_6_cast18_loc_c_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (55 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mlp_Block_if_end_i_i126_9218229_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv46_3FFFEAA08B2B : STD_LOGIC_VECTOR (45 downto 0) := "1111111111111111101010101000001000101100101011";
    constant ap_const_lv45_1FFFF1E4C834 : STD_LOGIC_VECTOR (44 downto 0) := "111111111111111110001111001001100100000110100";
    constant ap_const_lv42_13B25AB : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001001110110010010110101011";
    constant ap_const_lv46_665E0800000 : STD_LOGIC_VECTOR (45 downto 0) := "0001100110010111100000100000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv45_1FFFF52FD8A8 : STD_LOGIC_VECTOR (44 downto 0) := "111111111111111110101001011111101100010101000";
    constant ap_const_lv43_7FFFCDD5772 : STD_LOGIC_VECTOR (42 downto 0) := "1111111111111111100110111010101011101110010";
    constant ap_const_lv44_498CD8A : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100100110001100110110001010";
    constant ap_const_lv46_3FFFE7FB8C29 : STD_LOGIC_VECTOR (45 downto 0) := "1111111111111111100111111110111000110000101001";
    constant ap_const_lv41_1FFFF025CBA : STD_LOGIC_VECTOR (40 downto 0) := "11111111111111111000000100101110010111010";
    constant ap_const_lv43_36B9BE8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000011011010111001101111101000";
    constant ap_const_lv45_B6EB359 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001011011011101011001101011001";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shl_ln887_4_cast11_loc_blk_n : STD_LOGIC;
    signal shl_ln887_6_cast18_loc_c_blk_n : STD_LOGIC;
    signal shl_ln887_4_cast11_loc_read_reg_528 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_fu_178_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_reg_533 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_33_fu_184_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_33_reg_538 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_34_fu_190_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_34_reg_543 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_21_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_37_fu_339_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_37_reg_563 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_38_fu_345_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_38_reg_568 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_39_fu_350_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal r_V_39_reg_573 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_V_fu_178_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_33_fu_184_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_34_fu_190_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_fu_196_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal lhs_V_fu_201_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal lhs_V_31_fu_214_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln1393_fu_222_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln1316_fu_211_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal ret_V_36_fu_226_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_fu_232_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_17_fu_242_p3 : STD_LOGIC_VECTOR (46 downto 0);
    signal lhs_V_32_fu_250_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_26_fu_254_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_37_fu_257_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_s_fu_263_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_35_fu_281_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_35_fu_281_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal lhs_V_33_fu_273_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_27_fu_286_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_38_fu_290_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_20_fu_296_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_36_fu_314_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_36_fu_314_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal lhs_V_34_fu_306_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_28_fu_319_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_39_fu_323_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_37_fu_339_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_38_fu_345_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_39_fu_350_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lhs_V_35_fu_360_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_29_fu_367_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_40_fu_370_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_22_fu_376_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_36_fu_386_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_30_fu_394_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_41_fu_397_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_23_fu_403_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_37_fu_413_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_31_fu_421_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_42_fu_424_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_24_fu_430_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_40_fu_448_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_40_fu_448_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal lhs_V_38_fu_440_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_32_fu_453_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_43_fu_457_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_25_fu_463_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_41_fu_481_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_41_fu_481_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal lhs_V_39_fu_473_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_33_fu_486_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_44_fu_490_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal zext_ln1319_fu_356_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mlp_mul_46s_30s_46_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (45 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component mlp_mul_45s_29s_45_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (44 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component mlp_mul_42s_26ns_42_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component mlp_mul_43s_27s_43_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (42 downto 0);
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component mlp_mul_44s_28ns_44_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (43 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component mlp_mul_41s_25s_41_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (40 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component mlp_mul_43s_27ns_43_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (42 downto 0);
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component mlp_mul_45s_29ns_45_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (44 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;



begin
    mul_46s_30s_46_1_1_U63 : component mlp_mul_46s_30s_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 46,
        din1_WIDTH => 30,
        dout_WIDTH => 46)
    port map (
        din0 => p_read1,
        din1 => r_V_fu_178_p1,
        dout => r_V_fu_178_p2);

    mul_45s_29s_45_1_1_U64 : component mlp_mul_45s_29s_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 45,
        din1_WIDTH => 29,
        dout_WIDTH => 45)
    port map (
        din0 => p_read2,
        din1 => r_V_33_fu_184_p1,
        dout => r_V_33_fu_184_p2);

    mul_42s_26ns_42_1_1_U65 : component mlp_mul_42s_26ns_42_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 42,
        din1_WIDTH => 26,
        dout_WIDTH => 42)
    port map (
        din0 => p_read3,
        din1 => r_V_34_fu_190_p1,
        dout => r_V_34_fu_190_p2);

    mul_45s_29s_45_1_1_U66 : component mlp_mul_45s_29s_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 45,
        din1_WIDTH => 29,
        dout_WIDTH => 45)
    port map (
        din0 => p_read4,
        din1 => r_V_35_fu_281_p1,
        dout => r_V_35_fu_281_p2);

    mul_43s_27s_43_1_1_U67 : component mlp_mul_43s_27s_43_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 43,
        din1_WIDTH => 27,
        dout_WIDTH => 43)
    port map (
        din0 => shl_ln887_4_cast11_loc_read_reg_528,
        din1 => r_V_36_fu_314_p1,
        dout => r_V_36_fu_314_p2);

    mul_44s_28ns_44_1_1_U68 : component mlp_mul_44s_28ns_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 44,
        din1_WIDTH => 28,
        dout_WIDTH => 44)
    port map (
        din0 => p_read5,
        din1 => r_V_37_fu_339_p1,
        dout => r_V_37_fu_339_p2);

    mul_46s_30s_46_1_1_U69 : component mlp_mul_46s_30s_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 46,
        din1_WIDTH => 30,
        dout_WIDTH => 46)
    port map (
        din0 => p_read6,
        din1 => r_V_38_fu_345_p1,
        dout => r_V_38_fu_345_p2);

    mul_41s_25s_41_1_1_U70 : component mlp_mul_41s_25s_41_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 41,
        din1_WIDTH => 25,
        dout_WIDTH => 41)
    port map (
        din0 => p_read7,
        din1 => r_V_39_fu_350_p1,
        dout => r_V_39_fu_350_p2);

    mul_43s_27ns_43_1_1_U71 : component mlp_mul_43s_27ns_43_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 43,
        din1_WIDTH => 27,
        dout_WIDTH => 43)
    port map (
        din0 => p_read8,
        din1 => r_V_40_fu_448_p1,
        dout => r_V_40_fu_448_p2);

    mul_45s_29ns_45_1_1_U72 : component mlp_mul_45s_29ns_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 45,
        din1_WIDTH => 29,
        dout_WIDTH => 45)
    port map (
        din0 => p_read9,
        din1 => r_V_41_fu_481_p1,
        dout => r_V_41_fu_481_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg(0) <= '0';
                ap_return_0_preg(1) <= '0';
                ap_return_0_preg(2) <= '0';
                ap_return_0_preg(3) <= '0';
                ap_return_0_preg(4) <= '0';
                ap_return_0_preg(5) <= '0';
                ap_return_0_preg(6) <= '0';
                ap_return_0_preg(7) <= '0';
                ap_return_0_preg(8) <= '0';
                ap_return_0_preg(9) <= '0';
                ap_return_0_preg(10) <= '0';
                ap_return_0_preg(11) <= '0';
                ap_return_0_preg(12) <= '0';
                ap_return_0_preg(13) <= '0';
                ap_return_0_preg(14) <= '0';
                ap_return_0_preg(15) <= '0';
                ap_return_0_preg(16) <= '0';
                ap_return_0_preg(17) <= '0';
                ap_return_0_preg(18) <= '0';
                ap_return_0_preg(19) <= '0';
                ap_return_0_preg(20) <= '0';
                ap_return_0_preg(21) <= '0';
                ap_return_0_preg(22) <= '0';
                ap_return_0_preg(23) <= '0';
                ap_return_0_preg(24) <= '0';
                ap_return_0_preg(25) <= '0';
                ap_return_0_preg(26) <= '0';
                ap_return_0_preg(27) <= '0';
                ap_return_0_preg(28) <= '0';
                ap_return_0_preg(29) <= '0';
                ap_return_0_preg(30) <= '0';
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                                        ap_return_0_preg(30 downto 0) <= zext_ln1319_fu_356_p1(30 downto 0);
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_1_preg <= ret_V_44_fu_490_p2(49 downto 18);
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                r_V_33_reg_538 <= r_V_33_fu_184_p2;
                r_V_34_reg_543 <= r_V_34_fu_190_p2;
                r_V_reg_533 <= r_V_fu_178_p2;
                shl_ln887_4_cast11_loc_read_reg_528 <= shl_ln887_4_cast11_loc_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_V_37_reg_563 <= r_V_37_fu_339_p2;
                r_V_38_reg_568 <= r_V_38_fu_345_p2;
                r_V_39_reg_573 <= r_V_39_fu_350_p2;
                tmp_21_reg_558 <= ret_V_39_fu_323_p2(49 downto 18);
            end if;
        end if;
    end process;
    ap_return_0_preg(55 downto 31) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, shl_ln887_4_cast11_loc_empty_n, shl_ln887_6_cast18_loc_c_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (shl_ln887_6_cast18_loc_c_full_n = ap_const_logic_0) or (shl_ln887_4_cast11_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, shl_ln887_4_cast11_loc_empty_n, shl_ln887_6_cast18_loc_c_full_n)
    begin
        if (((ap_start = ap_const_logic_0) or (shl_ln887_6_cast18_loc_c_full_n = ap_const_logic_0) or (shl_ln887_4_cast11_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, shl_ln887_4_cast11_loc_empty_n, shl_ln887_6_cast18_loc_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (shl_ln887_6_cast18_loc_c_full_n = ap_const_logic_0) or (shl_ln887_4_cast11_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state3, zext_ln1319_fu_356_p1, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_0 <= zext_ln1319_fu_356_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state3, ret_V_44_fu_490_p2, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_1 <= ret_V_44_fu_490_p2(49 downto 18);
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    lhs_V_31_fu_214_p3 <= (lhs_V_fu_201_p4 & ap_const_lv18_0);
        lhs_V_32_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_242_p3),50));

    lhs_V_33_fu_273_p3 <= (tmp_s_fu_263_p4 & ap_const_lv18_0);
    lhs_V_34_fu_306_p3 <= (tmp_20_fu_296_p4 & ap_const_lv18_0);
    lhs_V_35_fu_360_p3 <= (tmp_21_reg_558 & ap_const_lv18_0);
    lhs_V_36_fu_386_p3 <= (tmp_22_fu_376_p4 & ap_const_lv18_0);
    lhs_V_37_fu_413_p3 <= (tmp_23_fu_403_p4 & ap_const_lv18_0);
    lhs_V_38_fu_440_p3 <= (tmp_24_fu_430_p4 & ap_const_lv18_0);
    lhs_V_39_fu_473_p3 <= (tmp_25_fu_463_p4 & ap_const_lv18_0);
    lhs_V_fu_201_p4 <= ret_V_fu_196_p2(45 downto 18);
    r_V_33_fu_184_p1 <= ap_const_lv45_1FFFF1E4C834(29 - 1 downto 0);
    r_V_34_fu_190_p1 <= ap_const_lv42_13B25AB(26 - 1 downto 0);
    r_V_35_fu_281_p1 <= ap_const_lv45_1FFFF52FD8A8(29 - 1 downto 0);
    r_V_36_fu_314_p1 <= ap_const_lv43_7FFFCDD5772(27 - 1 downto 0);
    r_V_37_fu_339_p1 <= ap_const_lv44_498CD8A(28 - 1 downto 0);
    r_V_38_fu_345_p1 <= ap_const_lv46_3FFFE7FB8C29(30 - 1 downto 0);
    r_V_39_fu_350_p1 <= ap_const_lv41_1FFFF025CBA(25 - 1 downto 0);
    r_V_40_fu_448_p1 <= ap_const_lv43_36B9BE8(27 - 1 downto 0);
    r_V_41_fu_481_p1 <= ap_const_lv45_B6EB359(29 - 1 downto 0);
    r_V_fu_178_p1 <= ap_const_lv46_3FFFEAA08B2B(30 - 1 downto 0);
    ret_V_36_fu_226_p2 <= std_logic_vector(signed(sext_ln1393_fu_222_p1) + signed(sext_ln1316_fu_211_p1));
    ret_V_37_fu_257_p2 <= std_logic_vector(signed(lhs_V_32_fu_250_p1) + signed(sext_ln1393_26_fu_254_p1));
    ret_V_38_fu_290_p2 <= std_logic_vector(unsigned(lhs_V_33_fu_273_p3) + unsigned(sext_ln1393_27_fu_286_p1));
    ret_V_39_fu_323_p2 <= std_logic_vector(unsigned(lhs_V_34_fu_306_p3) + unsigned(sext_ln1393_28_fu_319_p1));
    ret_V_40_fu_370_p2 <= std_logic_vector(unsigned(lhs_V_35_fu_360_p3) + unsigned(sext_ln1393_29_fu_367_p1));
    ret_V_41_fu_397_p2 <= std_logic_vector(unsigned(lhs_V_36_fu_386_p3) + unsigned(sext_ln1393_30_fu_394_p1));
    ret_V_42_fu_424_p2 <= std_logic_vector(unsigned(lhs_V_37_fu_413_p3) + unsigned(sext_ln1393_31_fu_421_p1));
    ret_V_43_fu_457_p2 <= std_logic_vector(unsigned(lhs_V_38_fu_440_p3) + unsigned(sext_ln1393_32_fu_453_p1));
    ret_V_44_fu_490_p2 <= std_logic_vector(unsigned(lhs_V_39_fu_473_p3) + unsigned(sext_ln1393_33_fu_486_p1));
    ret_V_fu_196_p2 <= std_logic_vector(unsigned(r_V_reg_533) + unsigned(ap_const_lv46_665E0800000));
        sext_ln1316_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_33_reg_538),47));

        sext_ln1393_26_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_34_reg_543),50));

        sext_ln1393_27_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_35_fu_281_p2),50));

        sext_ln1393_28_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_36_fu_314_p2),50));

        sext_ln1393_29_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_37_reg_563),50));

        sext_ln1393_30_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_38_reg_568),50));

        sext_ln1393_31_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_39_reg_573),50));

        sext_ln1393_32_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_40_fu_448_p2),50));

        sext_ln1393_33_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_41_fu_481_p2),50));

        sext_ln1393_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_31_fu_214_p3),47));


    shl_ln887_4_cast11_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shl_ln887_4_cast11_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shl_ln887_4_cast11_loc_blk_n <= shl_ln887_4_cast11_loc_empty_n;
        else 
            shl_ln887_4_cast11_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    shl_ln887_4_cast11_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shl_ln887_4_cast11_loc_empty_n, shl_ln887_6_cast18_loc_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (shl_ln887_6_cast18_loc_c_full_n = ap_const_logic_0) or (shl_ln887_4_cast11_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shl_ln887_4_cast11_loc_read <= ap_const_logic_1;
        else 
            shl_ln887_4_cast11_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    shl_ln887_6_cast18_loc_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shl_ln887_6_cast18_loc_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shl_ln887_6_cast18_loc_c_blk_n <= shl_ln887_6_cast18_loc_c_full_n;
        else 
            shl_ln887_6_cast18_loc_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    shl_ln887_6_cast18_loc_c_din <= p_read6;

    shl_ln887_6_cast18_loc_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shl_ln887_4_cast11_loc_empty_n, shl_ln887_6_cast18_loc_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (shl_ln887_6_cast18_loc_c_full_n = ap_const_logic_0) or (shl_ln887_4_cast11_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shl_ln887_6_cast18_loc_c_write <= ap_const_logic_1;
        else 
            shl_ln887_6_cast18_loc_c_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_17_fu_242_p3 <= (tmp_fu_232_p4 & ap_const_lv18_0);
    tmp_20_fu_296_p4 <= ret_V_38_fu_290_p2(49 downto 18);
    tmp_22_fu_376_p4 <= ret_V_40_fu_370_p2(49 downto 18);
    tmp_23_fu_403_p4 <= ret_V_41_fu_397_p2(49 downto 18);
    tmp_24_fu_430_p4 <= ret_V_42_fu_424_p2(49 downto 18);
    tmp_25_fu_463_p4 <= ret_V_43_fu_457_p2(49 downto 18);
    tmp_fu_232_p4 <= ret_V_36_fu_226_p2(46 downto 18);
    tmp_s_fu_263_p4 <= ret_V_37_fu_257_p2(49 downto 18);
    zext_ln1319_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),56));
end behav;
