-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp_Block_if_end_i_i126_9218235_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (30 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (44 downto 0);
    shl_ln887_1_cast8_loc_dout : IN STD_LOGIC_VECTOR (42 downto 0);
    shl_ln887_1_cast8_loc_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    shl_ln887_1_cast8_loc_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    shl_ln887_1_cast8_loc_empty_n : IN STD_LOGIC;
    shl_ln887_1_cast8_loc_read : OUT STD_LOGIC;
    p_read2 : IN STD_LOGIC_VECTOR (47 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (43 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (46 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (45 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (47 downto 0);
    shl_ln887_7_cast_loc_dout : IN STD_LOGIC_VECTOR (41 downto 0);
    shl_ln887_7_cast_loc_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    shl_ln887_7_cast_loc_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    shl_ln887_7_cast_loc_empty_n : IN STD_LOGIC;
    shl_ln887_7_cast_loc_read : OUT STD_LOGIC;
    p_read7 : IN STD_LOGIC_VECTOR (44 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (41 downto 0);
    shl_ln887_7_cast_loc_c_din : OUT STD_LOGIC_VECTOR (41 downto 0);
    shl_ln887_7_cast_loc_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    shl_ln887_7_cast_loc_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    shl_ln887_7_cast_loc_c_full_n : IN STD_LOGIC;
    shl_ln887_7_cast_loc_c_write : OUT STD_LOGIC;
    shl_ln887_5_cast22_loc_c_din : OUT STD_LOGIC_VECTOR (45 downto 0);
    shl_ln887_5_cast22_loc_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    shl_ln887_5_cast22_loc_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    shl_ln887_5_cast22_loc_c_full_n : IN STD_LOGIC;
    shl_ln887_5_cast22_loc_c_write : OUT STD_LOGIC;
    shl_ln887_3_cast21_loc_c_din : OUT STD_LOGIC_VECTOR (43 downto 0);
    shl_ln887_3_cast21_loc_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    shl_ln887_3_cast21_loc_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    shl_ln887_3_cast21_loc_c_full_n : IN STD_LOGIC;
    shl_ln887_3_cast21_loc_c_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (55 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mlp_Block_if_end_i_i126_9218235_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv45_1FFFED447DBE : STD_LOGIC_VECTOR (44 downto 0) := "111111111111111101101010001000111110110111110";
    constant ap_const_lv43_7FFFDDDB12D : STD_LOGIC_VECTOR (42 downto 0) := "1111111111111111101110111011011000100101101";
    constant ap_const_lv48_FFFFAD289680 : STD_LOGIC_VECTOR (47 downto 0) := "111111111111111110101101001010001001011010000000";
    constant ap_const_lv44_4DCFAE6 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100110111001111101011100110";
    constant ap_const_lv45_398EDAC0000 : STD_LOGIC_VECTOR (44 downto 0) := "000111001100011101101101011000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv47_24AD55B2 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000100100101011010101010110110010";
    constant ap_const_lv46_3FFFE11C4FA7 : STD_LOGIC_VECTOR (45 downto 0) := "1111111111111111100001000111000100111110100111";
    constant ap_const_lv48_4457520F : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000001000100010101110101001000001111";
    constant ap_const_lv42_3FFFE349844 : STD_LOGIC_VECTOR (41 downto 0) := "111111111111111110001101001001100001000100";
    constant ap_const_lv45_B187CDF : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001011000110000111110011011111";
    constant ap_const_lv42_3FFFE6BDF88 : STD_LOGIC_VECTOR (41 downto 0) := "111111111111111110011010111101111110001000";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shl_ln887_1_cast8_loc_blk_n : STD_LOGIC;
    signal shl_ln887_7_cast_loc_blk_n : STD_LOGIC;
    signal shl_ln887_7_cast_loc_c_blk_n : STD_LOGIC;
    signal shl_ln887_5_cast22_loc_c_blk_n : STD_LOGIC;
    signal shl_ln887_3_cast21_loc_c_blk_n : STD_LOGIC;
    signal shl_ln887_7_cast_loc_read_reg_536 : STD_LOGIC_VECTOR (41 downto 0);
    signal mul_ln1393_fu_204_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal mul_ln1393_reg_541 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_fu_210_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_reg_546 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_25_fu_216_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_25_reg_551 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_26_fu_222_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_26_reg_556 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_15_reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_29_fu_380_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_29_reg_576 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_30_fu_386_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_30_reg_581 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mul_ln1393_fu_204_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_fu_210_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_25_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_26_fu_222_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal ret_V_fu_228_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal lhs_V_fu_233_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal lhs_V_22_fu_246_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal sext_ln1393_fu_254_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln1316_fu_243_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_26_fu_258_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_fu_264_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_16_fu_274_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal lhs_V_23_fu_282_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_18_fu_286_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_35_fu_289_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_19_fu_295_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_28_fu_298_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_s_fu_304_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_27_fu_322_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_27_fu_322_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal lhs_V_25_fu_314_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_20_fu_327_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_29_fu_331_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_14_fu_337_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_28_fu_355_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_28_fu_355_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal lhs_V_26_fu_347_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_21_fu_360_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_30_fu_364_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_29_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_30_fu_386_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal lhs_V_27_fu_395_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_22_fu_402_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_31_fu_405_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_17_fu_411_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_28_fu_421_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_23_fu_429_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_32_fu_432_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_18_fu_438_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_31_fu_456_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_31_fu_456_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal lhs_V_29_fu_448_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_24_fu_461_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_33_fu_465_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_19_fu_471_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_32_fu_489_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_32_fu_489_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal lhs_V_30_fu_481_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1393_25_fu_494_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_34_fu_498_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal zext_ln1319_fu_391_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mlp_mul_45s_30s_45_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (44 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component mlp_mul_43s_27s_43_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (42 downto 0);
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component mlp_mul_48s_32s_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (47 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component mlp_mul_44s_28ns_44_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (43 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component mlp_mul_47s_31ns_47_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (46 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component mlp_mul_46s_30s_46_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (45 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component mlp_mul_48s_32ns_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (47 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component mlp_mul_42s_26s_42_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component mlp_mul_45s_29ns_45_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (44 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;



begin
    mul_45s_30s_45_1_1_U92 : component mlp_mul_45s_30s_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 45,
        din1_WIDTH => 30,
        dout_WIDTH => 45)
    port map (
        din0 => p_read1,
        din1 => mul_ln1393_fu_204_p1,
        dout => mul_ln1393_fu_204_p2);

    mul_43s_27s_43_1_1_U93 : component mlp_mul_43s_27s_43_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 43,
        din1_WIDTH => 27,
        dout_WIDTH => 43)
    port map (
        din0 => shl_ln887_1_cast8_loc_dout,
        din1 => r_V_fu_210_p1,
        dout => r_V_fu_210_p2);

    mul_48s_32s_48_1_1_U94 : component mlp_mul_48s_32s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 48,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        din0 => p_read2,
        din1 => r_V_25_fu_216_p1,
        dout => r_V_25_fu_216_p2);

    mul_44s_28ns_44_1_1_U95 : component mlp_mul_44s_28ns_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 44,
        din1_WIDTH => 28,
        dout_WIDTH => 44)
    port map (
        din0 => p_read3,
        din1 => r_V_26_fu_222_p1,
        dout => r_V_26_fu_222_p2);

    mul_47s_31ns_47_1_1_U96 : component mlp_mul_47s_31ns_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 47,
        din1_WIDTH => 31,
        dout_WIDTH => 47)
    port map (
        din0 => p_read4,
        din1 => r_V_27_fu_322_p1,
        dout => r_V_27_fu_322_p2);

    mul_46s_30s_46_1_1_U97 : component mlp_mul_46s_30s_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 46,
        din1_WIDTH => 30,
        dout_WIDTH => 46)
    port map (
        din0 => p_read5,
        din1 => r_V_28_fu_355_p1,
        dout => r_V_28_fu_355_p2);

    mul_48s_32ns_48_1_1_U98 : component mlp_mul_48s_32ns_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 48,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        din0 => p_read6,
        din1 => r_V_29_fu_380_p1,
        dout => r_V_29_fu_380_p2);

    mul_42s_26s_42_1_1_U99 : component mlp_mul_42s_26s_42_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 42,
        din1_WIDTH => 26,
        dout_WIDTH => 42)
    port map (
        din0 => shl_ln887_7_cast_loc_read_reg_536,
        din1 => r_V_30_fu_386_p1,
        dout => r_V_30_fu_386_p2);

    mul_45s_29ns_45_1_1_U100 : component mlp_mul_45s_29ns_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 45,
        din1_WIDTH => 29,
        dout_WIDTH => 45)
    port map (
        din0 => p_read7,
        din1 => r_V_31_fu_456_p1,
        dout => r_V_31_fu_456_p2);

    mul_42s_26s_42_1_1_U101 : component mlp_mul_42s_26s_42_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 42,
        din1_WIDTH => 26,
        dout_WIDTH => 42)
    port map (
        din0 => p_read8,
        din1 => r_V_32_fu_489_p1,
        dout => r_V_32_fu_489_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg(0) <= '0';
                ap_return_0_preg(1) <= '0';
                ap_return_0_preg(2) <= '0';
                ap_return_0_preg(3) <= '0';
                ap_return_0_preg(4) <= '0';
                ap_return_0_preg(5) <= '0';
                ap_return_0_preg(6) <= '0';
                ap_return_0_preg(7) <= '0';
                ap_return_0_preg(8) <= '0';
                ap_return_0_preg(9) <= '0';
                ap_return_0_preg(10) <= '0';
                ap_return_0_preg(11) <= '0';
                ap_return_0_preg(12) <= '0';
                ap_return_0_preg(13) <= '0';
                ap_return_0_preg(14) <= '0';
                ap_return_0_preg(15) <= '0';
                ap_return_0_preg(16) <= '0';
                ap_return_0_preg(17) <= '0';
                ap_return_0_preg(18) <= '0';
                ap_return_0_preg(19) <= '0';
                ap_return_0_preg(20) <= '0';
                ap_return_0_preg(21) <= '0';
                ap_return_0_preg(22) <= '0';
                ap_return_0_preg(23) <= '0';
                ap_return_0_preg(24) <= '0';
                ap_return_0_preg(25) <= '0';
                ap_return_0_preg(26) <= '0';
                ap_return_0_preg(27) <= '0';
                ap_return_0_preg(28) <= '0';
                ap_return_0_preg(29) <= '0';
                ap_return_0_preg(30) <= '0';
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                                        ap_return_0_preg(30 downto 0) <= zext_ln1319_fu_391_p1(30 downto 0);
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_1_preg <= ret_V_34_fu_498_p2(49 downto 18);
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                mul_ln1393_reg_541 <= mul_ln1393_fu_204_p2;
                r_V_25_reg_551 <= r_V_25_fu_216_p2;
                r_V_26_reg_556 <= r_V_26_fu_222_p2;
                r_V_reg_546 <= r_V_fu_210_p2;
                shl_ln887_7_cast_loc_read_reg_536 <= shl_ln887_7_cast_loc_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_V_29_reg_576 <= r_V_29_fu_380_p2;
                r_V_30_reg_581 <= r_V_30_fu_386_p2;
                tmp_15_reg_571 <= ret_V_30_fu_364_p2(49 downto 18);
            end if;
        end if;
    end process;
    ap_return_0_preg(55 downto 31) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, shl_ln887_1_cast8_loc_empty_n, shl_ln887_7_cast_loc_empty_n, shl_ln887_7_cast_loc_c_full_n, shl_ln887_5_cast22_loc_c_full_n, shl_ln887_3_cast21_loc_c_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (shl_ln887_3_cast21_loc_c_full_n = ap_const_logic_0) or (shl_ln887_5_cast22_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_empty_n = ap_const_logic_0) or (shl_ln887_1_cast8_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, shl_ln887_1_cast8_loc_empty_n, shl_ln887_7_cast_loc_empty_n, shl_ln887_7_cast_loc_c_full_n, shl_ln887_5_cast22_loc_c_full_n, shl_ln887_3_cast21_loc_c_full_n)
    begin
        if (((ap_start = ap_const_logic_0) or (shl_ln887_3_cast21_loc_c_full_n = ap_const_logic_0) or (shl_ln887_5_cast22_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_empty_n = ap_const_logic_0) or (shl_ln887_1_cast8_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, shl_ln887_1_cast8_loc_empty_n, shl_ln887_7_cast_loc_empty_n, shl_ln887_7_cast_loc_c_full_n, shl_ln887_5_cast22_loc_c_full_n, shl_ln887_3_cast21_loc_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (shl_ln887_3_cast21_loc_c_full_n = ap_const_logic_0) or (shl_ln887_5_cast22_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_empty_n = ap_const_logic_0) or (shl_ln887_1_cast8_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state3, zext_ln1319_fu_391_p1, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_0 <= zext_ln1319_fu_391_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state3, ret_V_34_fu_498_p2, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_1 <= ret_V_34_fu_498_p2(49 downto 18);
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    lhs_V_22_fu_246_p3 <= (lhs_V_fu_233_p4 & ap_const_lv18_0);
        lhs_V_23_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_274_p3),50));

    lhs_V_25_fu_314_p3 <= (tmp_s_fu_304_p4 & ap_const_lv18_0);
    lhs_V_26_fu_347_p3 <= (tmp_14_fu_337_p4 & ap_const_lv18_0);
    lhs_V_27_fu_395_p3 <= (tmp_15_reg_571 & ap_const_lv18_0);
    lhs_V_28_fu_421_p3 <= (tmp_17_fu_411_p4 & ap_const_lv18_0);
    lhs_V_29_fu_448_p3 <= (tmp_18_fu_438_p4 & ap_const_lv18_0);
    lhs_V_30_fu_481_p3 <= (tmp_19_fu_471_p4 & ap_const_lv18_0);
    lhs_V_fu_233_p4 <= ret_V_fu_228_p2(44 downto 18);
    mul_ln1393_fu_204_p1 <= ap_const_lv45_1FFFED447DBE(30 - 1 downto 0);
    r_V_25_fu_216_p1 <= ap_const_lv48_FFFFAD289680(32 - 1 downto 0);
    r_V_26_fu_222_p1 <= ap_const_lv44_4DCFAE6(28 - 1 downto 0);
    r_V_27_fu_322_p1 <= ap_const_lv47_24AD55B2(31 - 1 downto 0);
    r_V_28_fu_355_p1 <= ap_const_lv46_3FFFE11C4FA7(30 - 1 downto 0);
    r_V_29_fu_380_p1 <= ap_const_lv48_4457520F(32 - 1 downto 0);
    r_V_30_fu_386_p1 <= ap_const_lv42_3FFFE349844(26 - 1 downto 0);
    r_V_31_fu_456_p1 <= ap_const_lv45_B187CDF(29 - 1 downto 0);
    r_V_32_fu_489_p1 <= ap_const_lv42_3FFFE6BDF88(26 - 1 downto 0);
    r_V_fu_210_p1 <= ap_const_lv43_7FFFDDDB12D(27 - 1 downto 0);
    ret_V_26_fu_258_p2 <= std_logic_vector(signed(sext_ln1393_fu_254_p1) + signed(sext_ln1316_fu_243_p1));
    ret_V_28_fu_298_p2 <= std_logic_vector(unsigned(ret_V_35_fu_289_p2) + unsigned(sext_ln1393_19_fu_295_p1));
    ret_V_29_fu_331_p2 <= std_logic_vector(unsigned(lhs_V_25_fu_314_p3) + unsigned(sext_ln1393_20_fu_327_p1));
    ret_V_30_fu_364_p2 <= std_logic_vector(unsigned(lhs_V_26_fu_347_p3) + unsigned(sext_ln1393_21_fu_360_p1));
    ret_V_31_fu_405_p2 <= std_logic_vector(unsigned(lhs_V_27_fu_395_p3) + unsigned(sext_ln1393_22_fu_402_p1));
    ret_V_32_fu_432_p2 <= std_logic_vector(unsigned(lhs_V_28_fu_421_p3) + unsigned(sext_ln1393_23_fu_429_p1));
    ret_V_33_fu_465_p2 <= std_logic_vector(unsigned(lhs_V_29_fu_448_p3) + unsigned(sext_ln1393_24_fu_461_p1));
    ret_V_34_fu_498_p2 <= std_logic_vector(unsigned(lhs_V_30_fu_481_p3) + unsigned(sext_ln1393_25_fu_494_p1));
    ret_V_35_fu_289_p2 <= std_logic_vector(signed(lhs_V_23_fu_282_p1) + signed(sext_ln1393_18_fu_286_p1));
    ret_V_fu_228_p2 <= std_logic_vector(unsigned(mul_ln1393_reg_541) + unsigned(ap_const_lv45_398EDAC0000));
        sext_ln1316_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_546),46));

        sext_ln1393_18_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_25_reg_551),50));

        sext_ln1393_19_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_26_reg_556),50));

        sext_ln1393_20_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_27_fu_322_p2),50));

        sext_ln1393_21_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_28_fu_355_p2),50));

        sext_ln1393_22_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_29_reg_576),50));

        sext_ln1393_23_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_30_reg_581),50));

        sext_ln1393_24_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_31_fu_456_p2),50));

        sext_ln1393_25_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_32_fu_489_p2),50));

        sext_ln1393_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_22_fu_246_p3),46));


    shl_ln887_1_cast8_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shl_ln887_1_cast8_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shl_ln887_1_cast8_loc_blk_n <= shl_ln887_1_cast8_loc_empty_n;
        else 
            shl_ln887_1_cast8_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    shl_ln887_1_cast8_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shl_ln887_1_cast8_loc_empty_n, shl_ln887_7_cast_loc_empty_n, shl_ln887_7_cast_loc_c_full_n, shl_ln887_5_cast22_loc_c_full_n, shl_ln887_3_cast21_loc_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (shl_ln887_3_cast21_loc_c_full_n = ap_const_logic_0) or (shl_ln887_5_cast22_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_empty_n = ap_const_logic_0) or (shl_ln887_1_cast8_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shl_ln887_1_cast8_loc_read <= ap_const_logic_1;
        else 
            shl_ln887_1_cast8_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    shl_ln887_3_cast21_loc_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shl_ln887_3_cast21_loc_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shl_ln887_3_cast21_loc_c_blk_n <= shl_ln887_3_cast21_loc_c_full_n;
        else 
            shl_ln887_3_cast21_loc_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    shl_ln887_3_cast21_loc_c_din <= p_read3;

    shl_ln887_3_cast21_loc_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shl_ln887_1_cast8_loc_empty_n, shl_ln887_7_cast_loc_empty_n, shl_ln887_7_cast_loc_c_full_n, shl_ln887_5_cast22_loc_c_full_n, shl_ln887_3_cast21_loc_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (shl_ln887_3_cast21_loc_c_full_n = ap_const_logic_0) or (shl_ln887_5_cast22_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_empty_n = ap_const_logic_0) or (shl_ln887_1_cast8_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shl_ln887_3_cast21_loc_c_write <= ap_const_logic_1;
        else 
            shl_ln887_3_cast21_loc_c_write <= ap_const_logic_0;
        end if; 
    end process;


    shl_ln887_5_cast22_loc_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shl_ln887_5_cast22_loc_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shl_ln887_5_cast22_loc_c_blk_n <= shl_ln887_5_cast22_loc_c_full_n;
        else 
            shl_ln887_5_cast22_loc_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    shl_ln887_5_cast22_loc_c_din <= p_read5;

    shl_ln887_5_cast22_loc_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shl_ln887_1_cast8_loc_empty_n, shl_ln887_7_cast_loc_empty_n, shl_ln887_7_cast_loc_c_full_n, shl_ln887_5_cast22_loc_c_full_n, shl_ln887_3_cast21_loc_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (shl_ln887_3_cast21_loc_c_full_n = ap_const_logic_0) or (shl_ln887_5_cast22_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_empty_n = ap_const_logic_0) or (shl_ln887_1_cast8_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shl_ln887_5_cast22_loc_c_write <= ap_const_logic_1;
        else 
            shl_ln887_5_cast22_loc_c_write <= ap_const_logic_0;
        end if; 
    end process;


    shl_ln887_7_cast_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shl_ln887_7_cast_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shl_ln887_7_cast_loc_blk_n <= shl_ln887_7_cast_loc_empty_n;
        else 
            shl_ln887_7_cast_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    shl_ln887_7_cast_loc_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shl_ln887_7_cast_loc_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shl_ln887_7_cast_loc_c_blk_n <= shl_ln887_7_cast_loc_c_full_n;
        else 
            shl_ln887_7_cast_loc_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    shl_ln887_7_cast_loc_c_din <= shl_ln887_7_cast_loc_dout;

    shl_ln887_7_cast_loc_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shl_ln887_1_cast8_loc_empty_n, shl_ln887_7_cast_loc_empty_n, shl_ln887_7_cast_loc_c_full_n, shl_ln887_5_cast22_loc_c_full_n, shl_ln887_3_cast21_loc_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (shl_ln887_3_cast21_loc_c_full_n = ap_const_logic_0) or (shl_ln887_5_cast22_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_empty_n = ap_const_logic_0) or (shl_ln887_1_cast8_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shl_ln887_7_cast_loc_c_write <= ap_const_logic_1;
        else 
            shl_ln887_7_cast_loc_c_write <= ap_const_logic_0;
        end if; 
    end process;


    shl_ln887_7_cast_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, shl_ln887_1_cast8_loc_empty_n, shl_ln887_7_cast_loc_empty_n, shl_ln887_7_cast_loc_c_full_n, shl_ln887_5_cast22_loc_c_full_n, shl_ln887_3_cast21_loc_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (shl_ln887_3_cast21_loc_c_full_n = ap_const_logic_0) or (shl_ln887_5_cast22_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_c_full_n = ap_const_logic_0) or (shl_ln887_7_cast_loc_empty_n = ap_const_logic_0) or (shl_ln887_1_cast8_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            shl_ln887_7_cast_loc_read <= ap_const_logic_1;
        else 
            shl_ln887_7_cast_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_14_fu_337_p4 <= ret_V_29_fu_331_p2(49 downto 18);
    tmp_16_fu_274_p3 <= (tmp_fu_264_p4 & ap_const_lv18_0);
    tmp_17_fu_411_p4 <= ret_V_31_fu_405_p2(49 downto 18);
    tmp_18_fu_438_p4 <= ret_V_32_fu_432_p2(49 downto 18);
    tmp_19_fu_471_p4 <= ret_V_33_fu_465_p2(49 downto 18);
    tmp_fu_264_p4 <= ret_V_26_fu_258_p2(45 downto 18);
    tmp_s_fu_304_p4 <= ret_V_28_fu_298_p2(49 downto 18);
    zext_ln1319_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),56));
end behav;
