// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module logistic_regression_Block_entry35_proc2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        in_stream_TKEEP,
        in_stream_TSTRB,
        in_stream_TLAST,
        ap_return
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
input  [1:0] in_stream_TKEEP;
input  [1:0] in_stream_TSTRB;
input  [0:0] in_stream_TLAST;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_stream_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg   [15:0] reg_70;
reg    ap_block_state1;
reg   [15:0] tmp_data_V_1_reg_292;
(* use_dsp48 = "no" *) wire   [45:0] ret_V_13_fu_141_p2;
reg  signed [45:0] ret_V_13_reg_297;
(* use_dsp48 = "no" *) wire   [45:0] ret_V_15_fu_187_p2;
reg  signed [45:0] ret_V_15_reg_312;
(* use_dsp48 = "no" *) wire   [45:0] ret_V_17_fu_228_p2;
reg  signed [45:0] ret_V_17_reg_327;
wire  signed [45:0] grp_fu_268_p3;
wire    ap_CS_fsm_state11;
wire  signed [45:0] grp_fu_275_p3;
wire    ap_CS_fsm_state12;
wire  signed [15:0] shl_ln887_fu_74_p2;
wire  signed [15:0] shl_ln887_1_fu_84_p2;
wire  signed [15:0] shl_ln887_2_fu_93_p2;
wire   [30:0] mul_ln1393_fu_103_p1;
wire   [45:0] mul_ln1393_fu_103_p2;
wire   [28:0] r_V_fu_115_p1;
wire   [44:0] r_V_fu_115_p2;
wire   [45:0] ret_V_11_fu_109_p2;
wire  signed [45:0] sext_ln859_fu_121_p1;
wire   [28:0] r_V_4_fu_131_p1;
wire   [44:0] r_V_4_fu_131_p2;
wire   [45:0] ret_V_12_fu_125_p2;
wire  signed [45:0] sext_ln859_1_fu_137_p1;
wire  signed [15:0] shl_ln887_3_fu_147_p2;
wire  signed [15:0] shl_ln887_5_fu_157_p2;
wire  signed [15:0] shl_ln887_4_fu_167_p2;
wire   [28:0] r_V_6_fu_177_p1;
wire   [44:0] r_V_6_fu_177_p2;
wire  signed [45:0] grp_fu_252_p3;
wire  signed [45:0] sext_ln859_3_fu_183_p1;
wire  signed [15:0] shl_ln887_7_fu_192_p2;
wire  signed [15:0] shl_ln887_6_fu_202_p2;
wire  signed [15:0] shl_ln887_8_fu_212_p2;
wire   [29:0] r_V_8_fu_222_p1;
wire  signed [45:0] grp_fu_260_p3;
wire   [45:0] r_V_8_fu_222_p2;
wire  signed [15:0] shl_ln887_9_fu_233_p2;
wire  signed [45:0] grp_fu_283_p3;
wire    ap_CS_fsm_state13;
wire   [25:0] grp_fu_252_p1;
wire  signed [25:0] grp_fu_260_p1;
wire  signed [19:0] grp_fu_268_p1;
wire  signed [25:0] grp_fu_275_p1;
wire   [24:0] grp_fu_283_p1;
reg    grp_fu_252_ce;
reg    grp_fu_260_ce;
reg    grp_fu_268_ce;
reg    grp_fu_275_ce;
reg    grp_fu_283_ce;
reg   [31:0] ap_return_preg;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    regslice_both_in_stream_V_data_V_U_apdone_blk;
wire   [15:0] in_stream_TDATA_int_regslice;
wire    in_stream_TVALID_int_regslice;
reg    in_stream_TREADY_int_regslice;
wire    regslice_both_in_stream_V_data_V_U_ack_in;
wire    regslice_both_in_stream_V_keep_V_U_apdone_blk;
wire   [1:0] in_stream_TKEEP_int_regslice;
wire    regslice_both_in_stream_V_keep_V_U_vld_out;
wire    regslice_both_in_stream_V_keep_V_U_ack_in;
wire    regslice_both_in_stream_V_strb_V_U_apdone_blk;
wire   [1:0] in_stream_TSTRB_int_regslice;
wire    regslice_both_in_stream_V_strb_V_U_vld_out;
wire    regslice_both_in_stream_V_strb_V_U_ack_in;
wire    regslice_both_in_stream_V_last_V_U_apdone_blk;
wire   [0:0] in_stream_TLAST_int_regslice;
wire    regslice_both_in_stream_V_last_V_U_vld_out;
wire    regslice_both_in_stream_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
#0 ap_return_preg = 32'd0;
end

logistic_regression_mul_16s_31ns_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 46 ))
mul_16s_31ns_46_1_1_U1(
    .din0(shl_ln887_fu_74_p2),
    .din1(mul_ln1393_fu_103_p1),
    .dout(mul_ln1393_fu_103_p2)
);

logistic_regression_mul_16s_29ns_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 45 ))
mul_16s_29ns_45_1_1_U2(
    .din0(shl_ln887_1_fu_84_p2),
    .din1(r_V_fu_115_p1),
    .dout(r_V_fu_115_p2)
);

logistic_regression_mul_16s_29ns_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 45 ))
mul_16s_29ns_45_1_1_U3(
    .din0(shl_ln887_2_fu_93_p2),
    .din1(r_V_4_fu_131_p1),
    .dout(r_V_4_fu_131_p2)
);

logistic_regression_mul_16s_29ns_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 45 ))
mul_16s_29ns_45_1_1_U4(
    .din0(shl_ln887_4_fu_167_p2),
    .din1(r_V_6_fu_177_p1),
    .dout(r_V_6_fu_177_p2)
);

logistic_regression_mul_16s_30ns_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 46 ))
mul_16s_30ns_46_1_1_U5(
    .din0(shl_ln887_6_fu_202_p2),
    .din1(r_V_8_fu_222_p1),
    .dout(r_V_8_fu_222_p2)
);

logistic_regression_mac_muladd_16s_26ns_46s_46_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 26 ),
    .din2_WIDTH( 46 ),
    .dout_WIDTH( 46 ))
mac_muladd_16s_26ns_46s_46_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln887_3_fu_147_p2),
    .din1(grp_fu_252_p1),
    .din2(ret_V_13_reg_297),
    .ce(grp_fu_252_ce),
    .dout(grp_fu_252_p3)
);

logistic_regression_mac_muladd_16s_26s_46s_46_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 26 ),
    .din2_WIDTH( 46 ),
    .dout_WIDTH( 46 ))
mac_muladd_16s_26s_46s_46_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln887_5_fu_157_p2),
    .din1(grp_fu_260_p1),
    .din2(ret_V_15_reg_312),
    .ce(grp_fu_260_ce),
    .dout(grp_fu_260_p3)
);

logistic_regression_mac_muladd_16s_20s_46s_46_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 46 ),
    .dout_WIDTH( 46 ))
mac_muladd_16s_20s_46s_46_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln887_7_fu_192_p2),
    .din1(grp_fu_268_p1),
    .din2(ret_V_17_reg_327),
    .ce(grp_fu_268_ce),
    .dout(grp_fu_268_p3)
);

logistic_regression_mac_muladd_16s_26s_46s_46_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 26 ),
    .din2_WIDTH( 46 ),
    .dout_WIDTH( 46 ))
mac_muladd_16s_26s_46s_46_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln887_8_fu_212_p2),
    .din1(grp_fu_275_p1),
    .din2(grp_fu_268_p3),
    .ce(grp_fu_275_ce),
    .dout(grp_fu_275_p3)
);

logistic_regression_mac_muladd_16s_25ns_46s_46_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 25 ),
    .din2_WIDTH( 46 ),
    .dout_WIDTH( 46 ))
mac_muladd_16s_25ns_46s_46_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln887_9_fu_233_p2),
    .din1(grp_fu_283_p1),
    .din2(grp_fu_275_p3),
    .ce(grp_fu_283_ce),
    .dout(grp_fu_283_p3)
);

logistic_regression_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_stream_TDATA),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_V_data_V_U_ack_in),
    .data_out(in_stream_TDATA_int_regslice),
    .vld_out(in_stream_TVALID_int_regslice),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_V_data_V_U_apdone_blk)
);

logistic_regression_regslice_both #(
    .DataWidth( 2 ))
regslice_both_in_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_stream_TKEEP),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_V_keep_V_U_ack_in),
    .data_out(in_stream_TKEEP_int_regslice),
    .vld_out(regslice_both_in_stream_V_keep_V_U_vld_out),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_V_keep_V_U_apdone_blk)
);

logistic_regression_regslice_both #(
    .DataWidth( 2 ))
regslice_both_in_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_stream_TSTRB),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_V_strb_V_U_ack_in),
    .data_out(in_stream_TSTRB_int_regslice),
    .vld_out(regslice_both_in_stream_V_strb_V_U_vld_out),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_V_strb_V_U_apdone_blk)
);

logistic_regression_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_stream_TLAST),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_V_last_V_U_ack_in),
    .data_out(in_stream_TLAST_int_regslice),
    .vld_out(regslice_both_in_stream_V_last_V_U_vld_out),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_return_preg <= {{grp_fu_283_p3[45:14]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | (~((in_stream_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        reg_70 <= in_stream_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ret_V_13_reg_297 <= ret_V_13_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ret_V_15_reg_312 <= ret_V_15_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ret_V_17_reg_327 <= ret_V_17_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_data_V_1_reg_292 <= in_stream_TDATA_int_regslice;
    end
end

always @ (*) begin
    if ((in_stream_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if (((in_stream_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_return = {{grp_fu_283_p3[45:14]}};
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_fu_252_ce = 1'b1;
    end else begin
        grp_fu_252_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        grp_fu_260_ce = 1'b1;
    end else begin
        grp_fu_260_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_268_ce = 1'b1;
    end else begin
        grp_fu_268_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        grp_fu_275_ce = 1'b1;
    end else begin
        grp_fu_275_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        grp_fu_283_ce = 1'b1;
    end else begin
        grp_fu_283_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_stream_TDATA_blk_n = in_stream_TVALID_int_regslice;
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((in_stream_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_stream_TREADY_int_regslice = 1'b1;
    end else begin
        in_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((in_stream_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((in_stream_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_fu_252_p1 = 43'd56449068;

assign grp_fu_260_p1 = 42'd4398025582802;

assign grp_fu_268_p1 = 36'd68719163759;

assign grp_fu_275_p1 = 42'd4398016383817;

assign grp_fu_283_p1 = 42'd22008122;

assign in_stream_TREADY = regslice_both_in_stream_V_data_V_U_ack_in;

assign mul_ln1393_fu_103_p1 = 46'd755600768;

assign r_V_4_fu_131_p1 = 45'd267417153;

assign r_V_6_fu_177_p1 = 45'd231728488;

assign r_V_8_fu_222_p1 = 46'd441395577;

assign r_V_fu_115_p1 = 45'd174125420;

assign ret_V_11_fu_109_p2 = ($signed(mul_ln1393_fu_103_p2) + $signed(46'd65240956305408));

assign ret_V_12_fu_125_p2 = ($signed(ret_V_11_fu_109_p2) + $signed(sext_ln859_fu_121_p1));

assign ret_V_13_fu_141_p2 = ($signed(ret_V_12_fu_125_p2) + $signed(sext_ln859_1_fu_137_p1));

assign ret_V_15_fu_187_p2 = ($signed(grp_fu_252_p3) + $signed(sext_ln859_3_fu_183_p1));

assign ret_V_17_fu_228_p2 = ($signed(grp_fu_260_p3) + $signed(r_V_8_fu_222_p2));

assign sext_ln859_1_fu_137_p1 = $signed(r_V_4_fu_131_p2);

assign sext_ln859_3_fu_183_p1 = $signed(r_V_6_fu_177_p2);

assign sext_ln859_fu_121_p1 = $signed(r_V_fu_115_p2);

assign shl_ln887_1_fu_84_p2 = tmp_data_V_1_reg_292 << 16'd14;

assign shl_ln887_2_fu_93_p2 = in_stream_TDATA_int_regslice << 16'd14;

assign shl_ln887_3_fu_147_p2 = in_stream_TDATA_int_regslice << 16'd14;

assign shl_ln887_4_fu_167_p2 = reg_70 << 16'd14;

assign shl_ln887_5_fu_157_p2 = in_stream_TDATA_int_regslice << 16'd14;

assign shl_ln887_6_fu_202_p2 = reg_70 << 16'd14;

assign shl_ln887_7_fu_192_p2 = in_stream_TDATA_int_regslice << 16'd14;

assign shl_ln887_8_fu_212_p2 = in_stream_TDATA_int_regslice << 16'd14;

assign shl_ln887_9_fu_233_p2 = in_stream_TDATA_int_regslice << 16'd14;

assign shl_ln887_fu_74_p2 = reg_70 << 16'd14;

endmodule //logistic_regression_Block_entry35_proc2
