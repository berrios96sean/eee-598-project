-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity logistic_regression_Block_entry35_proc2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of logistic_regression_Block_entry35_proc2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv16_E : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    constant ap_const_lv46_2D098D80 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000101101000010011000110110000000";
    constant ap_const_lv46_3B5618068000 : STD_LOGIC_VECTOR (45 downto 0) := "1110110101011000011000000001101000000000000000";
    constant ap_const_lv45_A60F16C : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001010011000001111000101101100";
    constant ap_const_lv45_FF07641 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001111111100000111011001000001";
    constant ap_const_lv45_DCFE568 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001101110011111110010101101000";
    constant ap_const_lv46_1A4F2979 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000011010010011110010100101111001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv43_35D582C : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000011010111010101100000101100";
    constant ap_const_lv42_3FFFEC0A8D2 : STD_LOGIC_VECTOR (41 downto 0) := "111111111111111110110000001010100011010010";
    constant ap_const_lv36_FFFFB396F : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111110110011100101101111";
    constant ap_const_lv42_3FFFE344B49 : STD_LOGIC_VECTOR (41 downto 0) := "111111111111111110001101000100101101001001";
    constant ap_const_lv42_14FD13A : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001010011111101000100111010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_70 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_data_V_1_reg_292 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_13_fu_141_p2 : STD_LOGIC_VECTOR (45 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_13_fu_141_p2 : signal is "no";
    signal ret_V_13_reg_297 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_15_fu_187_p2 : STD_LOGIC_VECTOR (45 downto 0);
    attribute use_dsp48 of ret_V_15_fu_187_p2 : signal is "no";
    signal ret_V_15_reg_312 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_17_fu_228_p2 : STD_LOGIC_VECTOR (45 downto 0);
    attribute use_dsp48 of ret_V_17_fu_228_p2 : signal is "no";
    signal ret_V_17_reg_327 : STD_LOGIC_VECTOR (45 downto 0);
    signal grp_fu_268_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_275_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal shl_ln887_fu_74_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln887_1_fu_84_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln887_2_fu_93_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1393_fu_103_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1393_fu_103_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_fu_115_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_fu_115_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal ret_V_11_fu_109_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln859_fu_121_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_4_fu_131_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_4_fu_131_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal ret_V_12_fu_125_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln859_1_fu_137_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal shl_ln887_3_fu_147_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln887_5_fu_157_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln887_4_fu_167_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_6_fu_177_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_6_fu_177_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_252_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln859_3_fu_183_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal shl_ln887_7_fu_192_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln887_6_fu_202_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln887_8_fu_212_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_8_fu_222_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_260_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_8_fu_222_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal shl_ln887_9_fu_233_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_283_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_252_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_260_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_268_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_283_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_252_ce : STD_LOGIC;
    signal grp_fu_260_ce : STD_LOGIC;
    signal grp_fu_268_ce : STD_LOGIC;
    signal grp_fu_275_ce : STD_LOGIC;
    signal grp_fu_283_ce : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal regslice_both_in_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in_stream_TVALID_int_regslice : STD_LOGIC;
    signal in_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_stream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_stream_TKEEP_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_in_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_stream_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_stream_TSTRB_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_in_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_stream_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_stream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_stream_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component logistic_regression_mul_16s_31ns_46_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component logistic_regression_mul_16s_29ns_45_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component logistic_regression_mul_16s_30ns_46_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component logistic_regression_mac_muladd_16s_26ns_46s_46_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        din2 : IN STD_LOGIC_VECTOR (45 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component logistic_regression_mac_muladd_16s_26s_46s_46_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        din2 : IN STD_LOGIC_VECTOR (45 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component logistic_regression_mac_muladd_16s_20s_46s_46_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (45 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component logistic_regression_mac_muladd_16s_25ns_46s_46_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        din2 : IN STD_LOGIC_VECTOR (45 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component logistic_regression_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mul_16s_31ns_46_1_1_U1 : component logistic_regression_mul_16s_31ns_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 31,
        dout_WIDTH => 46)
    port map (
        din0 => shl_ln887_fu_74_p2,
        din1 => mul_ln1393_fu_103_p1,
        dout => mul_ln1393_fu_103_p2);

    mul_16s_29ns_45_1_1_U2 : component logistic_regression_mul_16s_29ns_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 29,
        dout_WIDTH => 45)
    port map (
        din0 => shl_ln887_1_fu_84_p2,
        din1 => r_V_fu_115_p1,
        dout => r_V_fu_115_p2);

    mul_16s_29ns_45_1_1_U3 : component logistic_regression_mul_16s_29ns_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 29,
        dout_WIDTH => 45)
    port map (
        din0 => shl_ln887_2_fu_93_p2,
        din1 => r_V_4_fu_131_p1,
        dout => r_V_4_fu_131_p2);

    mul_16s_29ns_45_1_1_U4 : component logistic_regression_mul_16s_29ns_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 29,
        dout_WIDTH => 45)
    port map (
        din0 => shl_ln887_4_fu_167_p2,
        din1 => r_V_6_fu_177_p1,
        dout => r_V_6_fu_177_p2);

    mul_16s_30ns_46_1_1_U5 : component logistic_regression_mul_16s_30ns_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 30,
        dout_WIDTH => 46)
    port map (
        din0 => shl_ln887_6_fu_202_p2,
        din1 => r_V_8_fu_222_p1,
        dout => r_V_8_fu_222_p2);

    mac_muladd_16s_26ns_46s_46_4_1_U6 : component logistic_regression_mac_muladd_16s_26ns_46s_46_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 26,
        din2_WIDTH => 46,
        dout_WIDTH => 46)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => shl_ln887_3_fu_147_p2,
        din1 => grp_fu_252_p1,
        din2 => ret_V_13_reg_297,
        ce => grp_fu_252_ce,
        dout => grp_fu_252_p3);

    mac_muladd_16s_26s_46s_46_4_1_U7 : component logistic_regression_mac_muladd_16s_26s_46s_46_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 26,
        din2_WIDTH => 46,
        dout_WIDTH => 46)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => shl_ln887_5_fu_157_p2,
        din1 => grp_fu_260_p1,
        din2 => ret_V_15_reg_312,
        ce => grp_fu_260_ce,
        dout => grp_fu_260_p3);

    mac_muladd_16s_20s_46s_46_4_1_U8 : component logistic_regression_mac_muladd_16s_20s_46s_46_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 20,
        din2_WIDTH => 46,
        dout_WIDTH => 46)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => shl_ln887_7_fu_192_p2,
        din1 => grp_fu_268_p1,
        din2 => ret_V_17_reg_327,
        ce => grp_fu_268_ce,
        dout => grp_fu_268_p3);

    mac_muladd_16s_26s_46s_46_4_1_U9 : component logistic_regression_mac_muladd_16s_26s_46s_46_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 26,
        din2_WIDTH => 46,
        dout_WIDTH => 46)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => shl_ln887_8_fu_212_p2,
        din1 => grp_fu_275_p1,
        din2 => grp_fu_268_p3,
        ce => grp_fu_275_ce,
        dout => grp_fu_275_p3);

    mac_muladd_16s_25ns_46s_46_4_1_U10 : component logistic_regression_mac_muladd_16s_25ns_46s_46_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 25,
        din2_WIDTH => 46,
        dout_WIDTH => 46)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => shl_ln887_9_fu_233_p2,
        din1 => grp_fu_283_p1,
        din2 => grp_fu_275_p3,
        ce => grp_fu_283_ce,
        dout => grp_fu_283_p3);

    regslice_both_in_stream_V_data_V_U : component logistic_regression_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_stream_TDATA,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_V_data_V_U_ack_in,
        data_out => in_stream_TDATA_int_regslice,
        vld_out => in_stream_TVALID_int_regslice,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_V_data_V_U_apdone_blk);

    regslice_both_in_stream_V_keep_V_U : component logistic_regression_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_stream_TKEEP,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_V_keep_V_U_ack_in,
        data_out => in_stream_TKEEP_int_regslice,
        vld_out => regslice_both_in_stream_V_keep_V_U_vld_out,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_V_keep_V_U_apdone_blk);

    regslice_both_in_stream_V_strb_V_U : component logistic_regression_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_stream_TSTRB,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_V_strb_V_U_ack_in,
        data_out => in_stream_TSTRB_int_regslice,
        vld_out => regslice_both_in_stream_V_strb_V_U_vld_out,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_V_strb_V_U_apdone_blk);

    regslice_both_in_stream_V_last_V_U : component logistic_regression_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_stream_TLAST,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_V_last_V_U_ack_in,
        data_out => in_stream_TLAST_int_regslice,
        vld_out => regslice_both_in_stream_V_last_V_U_vld_out,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_return_preg <= grp_fu_283_p3(45 downto 14);
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then
                reg_70 <= in_stream_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ret_V_13_reg_297 <= ret_V_13_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ret_V_15_reg_312 <= ret_V_15_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ret_V_17_reg_327 <= ret_V_17_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_data_V_1_reg_292 <= in_stream_TDATA_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, in_stream_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(in_stream_TVALID_int_regslice)
    begin
        if ((in_stream_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, in_stream_TVALID_int_regslice)
    begin
        if (((in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(in_stream_TVALID_int_regslice)
    begin
        if ((in_stream_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(in_stream_TVALID_int_regslice)
    begin
        if ((in_stream_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(in_stream_TVALID_int_regslice)
    begin
        if ((in_stream_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(in_stream_TVALID_int_regslice)
    begin
        if ((in_stream_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(in_stream_TVALID_int_regslice)
    begin
        if ((in_stream_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(in_stream_TVALID_int_regslice)
    begin
        if ((in_stream_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(in_stream_TVALID_int_regslice)
    begin
        if ((in_stream_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(in_stream_TVALID_int_regslice)
    begin
        if ((in_stream_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, in_stream_TVALID_int_regslice)
    begin
                ap_block_state1 <= ((in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_fu_283_p3, ap_CS_fsm_state13, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_return <= grp_fu_283_p3(45 downto 14);
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    grp_fu_252_ce_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, in_stream_TVALID_int_regslice)
    begin
        if ((((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_fu_252_ce <= ap_const_logic_1;
        else 
            grp_fu_252_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_252_p1 <= ap_const_lv43_35D582C(26 - 1 downto 0);

    grp_fu_260_ce_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, in_stream_TVALID_int_regslice)
    begin
        if ((((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            grp_fu_260_ce <= ap_const_logic_1;
        else 
            grp_fu_260_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_260_p1 <= ap_const_lv42_3FFFEC0A8D2(26 - 1 downto 0);

    grp_fu_268_ce_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, in_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            grp_fu_268_ce <= ap_const_logic_1;
        else 
            grp_fu_268_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_268_p1 <= ap_const_lv36_FFFFB396F(20 - 1 downto 0);

    grp_fu_275_ce_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, in_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            grp_fu_275_ce <= ap_const_logic_1;
        else 
            grp_fu_275_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_275_p1 <= ap_const_lv42_3FFFE344B49(26 - 1 downto 0);

    grp_fu_283_ce_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, in_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            grp_fu_283_ce <= ap_const_logic_1;
        else 
            grp_fu_283_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_283_p1 <= ap_const_lv42_14FD13A(25 - 1 downto 0);

    in_stream_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, in_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_stream_TDATA_blk_n <= in_stream_TVALID_int_regslice;
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= regslice_both_in_stream_V_data_V_U_ack_in;

    in_stream_TREADY_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, in_stream_TVALID_int_regslice)
    begin
        if ((((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((in_stream_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_stream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1393_fu_103_p1 <= ap_const_lv46_2D098D80(31 - 1 downto 0);
    r_V_4_fu_131_p1 <= ap_const_lv45_FF07641(29 - 1 downto 0);
    r_V_6_fu_177_p1 <= ap_const_lv45_DCFE568(29 - 1 downto 0);
    r_V_8_fu_222_p1 <= ap_const_lv46_1A4F2979(30 - 1 downto 0);
    r_V_fu_115_p1 <= ap_const_lv45_A60F16C(29 - 1 downto 0);
    ret_V_11_fu_109_p2 <= std_logic_vector(unsigned(mul_ln1393_fu_103_p2) + unsigned(ap_const_lv46_3B5618068000));
    ret_V_12_fu_125_p2 <= std_logic_vector(unsigned(ret_V_11_fu_109_p2) + unsigned(sext_ln859_fu_121_p1));
    ret_V_13_fu_141_p2 <= std_logic_vector(unsigned(ret_V_12_fu_125_p2) + unsigned(sext_ln859_1_fu_137_p1));
    ret_V_15_fu_187_p2 <= std_logic_vector(signed(grp_fu_252_p3) + signed(sext_ln859_3_fu_183_p1));
    ret_V_17_fu_228_p2 <= std_logic_vector(signed(grp_fu_260_p3) + signed(r_V_8_fu_222_p2));
        sext_ln859_1_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_4_fu_131_p2),46));

        sext_ln859_3_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_6_fu_177_p2),46));

        sext_ln859_fu_121_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_115_p2),46));

    shl_ln887_1_fu_84_p2 <= std_logic_vector(shift_left(unsigned(tmp_data_V_1_reg_292),to_integer(unsigned('0' & ap_const_lv16_E(16-1 downto 0)))));
    shl_ln887_2_fu_93_p2 <= std_logic_vector(shift_left(unsigned(in_stream_TDATA_int_regslice),to_integer(unsigned('0' & ap_const_lv16_E(16-1 downto 0)))));
    shl_ln887_3_fu_147_p2 <= std_logic_vector(shift_left(unsigned(in_stream_TDATA_int_regslice),to_integer(unsigned('0' & ap_const_lv16_E(16-1 downto 0)))));
    shl_ln887_4_fu_167_p2 <= std_logic_vector(shift_left(unsigned(reg_70),to_integer(unsigned('0' & ap_const_lv16_E(16-1 downto 0)))));
    shl_ln887_5_fu_157_p2 <= std_logic_vector(shift_left(unsigned(in_stream_TDATA_int_regslice),to_integer(unsigned('0' & ap_const_lv16_E(16-1 downto 0)))));
    shl_ln887_6_fu_202_p2 <= std_logic_vector(shift_left(unsigned(reg_70),to_integer(unsigned('0' & ap_const_lv16_E(16-1 downto 0)))));
    shl_ln887_7_fu_192_p2 <= std_logic_vector(shift_left(unsigned(in_stream_TDATA_int_regslice),to_integer(unsigned('0' & ap_const_lv16_E(16-1 downto 0)))));
    shl_ln887_8_fu_212_p2 <= std_logic_vector(shift_left(unsigned(in_stream_TDATA_int_regslice),to_integer(unsigned('0' & ap_const_lv16_E(16-1 downto 0)))));
    shl_ln887_9_fu_233_p2 <= std_logic_vector(shift_left(unsigned(in_stream_TDATA_int_regslice),to_integer(unsigned('0' & ap_const_lv16_E(16-1 downto 0)))));
    shl_ln887_fu_74_p2 <= std_logic_vector(shift_left(unsigned(reg_70),to_integer(unsigned('0' & ap_const_lv16_E(16-1 downto 0)))));
end behav;
