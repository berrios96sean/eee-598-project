-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity logistic_regression_Block_logistic_regression_for_cond_i_exit_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_EN_A : OUT STD_LOGIC;
    weights_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    weights_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_EN_B : OUT STD_LOGIC;
    weights_WEN_B : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_Din_B : OUT STD_LOGIC_VECTOR (15 downto 0);
    weights_Dout_B : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read18 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read19 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read20 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read21 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read22 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read23 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read24 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read26 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read27 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read28 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read30 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read31 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of logistic_regression_Block_logistic_regression_for_cond_i_exit_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (57 downto 0) := "0000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (57 downto 0) := "0000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (57 downto 0) := "0000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (57 downto 0) := "0000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (57 downto 0) := "0000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (57 downto 0) := "0000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (57 downto 0) := "0001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (57 downto 0) := "0010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (57 downto 0) := "0100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (57 downto 0) := "1000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_400 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv16_FF80 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110000000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_FFE8 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111101000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_800000 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal grp_fu_844_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1316_30_reg_1082 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal reg_1315 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal reg_1320 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal reg_1325 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal reg_1330 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_1335 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1339 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1343 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1347 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1351 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1355 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1359 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1363 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1367 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1371 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1375 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_17_fu_1483_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_17_reg_2805 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_20_fu_1639_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_20_reg_2850 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_22_fu_1691_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_22_reg_2870 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_23_fu_1720_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_23_reg_2885 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_7_fu_1818_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_7_reg_2945 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_23_reg_2970 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_8_fu_1847_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_8_reg_2985 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_12_fu_2002_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_12_reg_3040 : STD_LOGIC_VECTOR (15 downto 0);
    signal partial_sums_V_25_reg_3055 : STD_LOGIC_VECTOR (15 downto 0);
    signal partial_sums_V_27_reg_3060 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_13_fu_2104_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_13_reg_3075 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_5_fu_2165_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_5_reg_3095 : STD_LOGIC_VECTOR (15 downto 0);
    signal partial_sums_V_31_reg_3100 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_1_fu_2217_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_1_reg_3105 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_6_fu_2250_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_6_reg_3110 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln859_27_fu_2260_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_27_reg_3115 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_28_fu_2272_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_28_reg_3120 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln859_29_fu_2281_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_29_reg_3125 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln859_30_fu_2290_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_30_reg_3130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal linear_sum_V_3_fu_2299_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal linear_sum_V_3_reg_3135 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal abs_linear_sum_V_fu_2304_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal abs_linear_sum_V_reg_3142 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_2344_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sdiv_ln1349_reg_3157 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal icmp_ln1136_fu_2359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_reg_3162 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal p_Result_7_fu_2365_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_reg_3168 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_35_fu_2379_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_35_reg_3173 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1145_fu_2417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1145_reg_3180 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1145_fu_2423_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1145_reg_3187 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1148_fu_2427_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1148_reg_3192 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1144_fu_2431_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1144_reg_3197 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_i_fu_2526_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_i_reg_3202 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal icmp_ln1159_fu_2534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1159_reg_3207 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_4_reg_3212 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal p_Result_5_reg_3217 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_3222 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln809_fu_2657_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln809_reg_3227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal notlhs_fu_2661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_3232 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_2667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_3237 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal weights_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_841_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_8_fu_1495_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_32_fu_1732_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_28_fu_1950_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_841_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_9_fu_1507_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_33_fu_1744_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_29_fu_1962_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_842_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_fu_1385_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_38_fu_1801_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_48_fu_2014_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_842_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_1_fu_1397_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_39_fu_1813_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_49_fu_2026_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_843_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_10_fu_1518_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_26_fu_1703_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_50_fu_2037_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_843_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_11_fu_1530_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_27_fu_1715_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_51_fu_2049_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_844_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_6_fu_1454_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_20_fu_1651_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_46_fu_1927_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_60_fu_2177_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_844_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_7_fu_1466_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_21_fu_1663_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_47_fu_1939_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_61_fu_2189_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_845_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_4_fu_1431_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_40_fu_1859_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_58_fu_2138_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_845_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_5_fu_1443_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_41_fu_1871_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_59_fu_2150_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_846_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_2_fu_1408_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_36_fu_1778_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_44_fu_1905_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_846_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_3_fu_1420_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_37_fu_1790_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_45_fu_1917_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_847_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_16_fu_1587_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_34_fu_1755_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_56_fu_2115_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_847_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_17_fu_1599_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_35_fu_1767_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_57_fu_2127_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_848_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_12_fu_1541_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_42_fu_1882_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_52_fu_2060_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_848_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_13_fu_1553_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_43_fu_1894_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_53_fu_2072_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_849_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_14_fu_1564_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_24_fu_1830_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_54_fu_2083_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_849_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_15_fu_1576_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_25_fu_1842_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_55_fu_2095_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_850_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_18_fu_1610_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_22_fu_1674_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_30_fu_1973_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_62_fu_2200_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_850_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1316_19_fu_1622_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_23_fu_1686_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_31_fu_1985_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1316_63_fu_2212_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1210_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_842_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_846_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_845_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_841_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_843_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_848_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_849_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_847_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_850_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_fu_1379_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_1390_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_fu_1402_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_1_fu_1413_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_fu_1425_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_2_fu_1436_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_3_fu_1448_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_3_fu_1459_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_16_fu_1477_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_15_fu_1471_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_fu_1489_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_4_fu_1500_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_5_fu_1512_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_5_fu_1523_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_6_fu_1535_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_6_fu_1546_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_7_fu_1558_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_7_fu_1569_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_8_fu_1581_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_8_fu_1592_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_9_fu_1604_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_9_fu_1615_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_19_fu_1633_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_18_fu_1627_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_10_fu_1645_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_s_fu_1656_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_11_fu_1668_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_10_fu_1679_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_13_fu_1697_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_12_fu_1708_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_16_fu_1726_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_15_fu_1737_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_17_fu_1749_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_16_fu_1760_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_18_fu_1772_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_17_fu_1783_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_19_fu_1795_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_18_fu_1806_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_12_fu_1824_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_11_fu_1835_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_20_fu_1853_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_19_fu_1864_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_21_fu_1876_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_20_fu_1887_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_22_fu_1899_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_21_fu_1910_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_23_fu_1922_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_22_fu_1932_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_14_fu_1944_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_13_fu_1955_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_15_fu_1967_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_14_fu_1978_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_11_fu_1996_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_10_fu_1990_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_24_fu_2008_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_23_fu_2019_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_25_fu_2031_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_24_fu_2042_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_26_fu_2054_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_25_fu_2065_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_27_fu_2077_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_26_fu_2088_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_9_fu_2100_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_28_fu_2109_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_27_fu_2120_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_29_fu_2132_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_28_fu_2143_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_4_fu_2160_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_3_fu_2155_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_30_fu_2171_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_29_fu_2182_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_31_fu_2194_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln884_30_fu_2205_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal partial_sums_V_30_fu_2223_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal linear_sum_V_fu_2233_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_fu_2239_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_2_fu_2245_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_26_fu_2255_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_25_fu_2266_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_24_fu_2277_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_21_fu_2286_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_14_fu_2295_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_2310_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal linear_sum_V_4_fu_2317_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln859_fu_2323_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_2327_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_2344_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln859_fu_2350_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal probability_V_fu_2353_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_33_fu_2373_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_2387_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_8_fu_2397_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1244_fu_2405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_2409_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_2435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_2440_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln1148_fu_2456_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1148_fu_2461_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln1148_fu_2465_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_fu_2471_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1147_fu_2450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1148_fu_2476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_2488_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1150_fu_2502_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_3_fu_2507_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1150_fu_2496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1150_fu_2514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_2482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1150_fu_2520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1159_fu_2543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1158_fu_2540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1159_fu_2548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1160_fu_2558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1160_fu_2563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln1159_fu_2552_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1160_fu_2567_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_2573_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1162_fu_2580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_fu_2583_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1165_fu_2627_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1144_fu_2620_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1170_fu_2632_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1163_fu_2617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_fu_2638_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_9_fu_2645_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_2676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_90_fu_2680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1136_fu_2693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1136_fu_2686_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_pkt_data_V_fu_2698_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln60_fu_2706_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1210_ce : STD_LOGIC;
    signal grp_fu_2344_ap_start : STD_LOGIC;
    signal grp_fu_2344_ap_done : STD_LOGIC;
    signal regslice_both_out_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state58 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal out_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_TVALID_int_regslice : STD_LOGIC;
    signal out_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_stream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_stream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_stream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_stream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component logistic_regression_mul_16s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component logistic_regression_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component logistic_regression_sdiv_24ns_17s_16_28_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component logistic_regression_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mul_16s_16s_24_1_1_U9 : component logistic_regression_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_841_p0,
        din1 => grp_fu_841_p1,
        dout => grp_fu_841_p2);

    mul_16s_16s_24_1_1_U10 : component logistic_regression_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_842_p0,
        din1 => grp_fu_842_p1,
        dout => grp_fu_842_p2);

    mul_16s_16s_24_1_1_U11 : component logistic_regression_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_843_p0,
        din1 => grp_fu_843_p1,
        dout => grp_fu_843_p2);

    mul_16s_16s_24_1_1_U12 : component logistic_regression_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_844_p0,
        din1 => grp_fu_844_p1,
        dout => grp_fu_844_p2);

    mul_16s_16s_24_1_1_U13 : component logistic_regression_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_845_p0,
        din1 => grp_fu_845_p1,
        dout => grp_fu_845_p2);

    mul_16s_16s_24_1_1_U14 : component logistic_regression_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_846_p0,
        din1 => grp_fu_846_p1,
        dout => grp_fu_846_p2);

    mul_16s_16s_24_1_1_U15 : component logistic_regression_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_847_p0,
        din1 => grp_fu_847_p1,
        dout => grp_fu_847_p2);

    mul_16s_16s_24_1_1_U16 : component logistic_regression_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_848_p0,
        din1 => grp_fu_848_p1,
        dout => grp_fu_848_p2);

    mul_16s_16s_24_1_1_U17 : component logistic_regression_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_849_p0,
        din1 => grp_fu_849_p1,
        dout => grp_fu_849_p2);

    mul_16s_16s_24_1_1_U18 : component logistic_regression_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_850_p0,
        din1 => grp_fu_850_p1,
        dout => grp_fu_850_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U19 : component logistic_regression_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1210_p0,
        din1 => ap_const_lv32_3F000000,
        ce => grp_fu_1210_ce,
        opcode => ap_const_lv5_3,
        dout => grp_fu_1210_p2);

    sdiv_24ns_17s_16_28_seq_1_U20 : component logistic_regression_sdiv_24ns_17s_16_28_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 17,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_2344_ap_start,
        done => grp_fu_2344_ap_done,
        din0 => grp_fu_2344_p0,
        din1 => ret_V_fu_2327_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2344_p2);

    regslice_both_out_stream_V_data_V_U : component logistic_regression_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => out_stream_TDATA_int_regslice,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => out_stream_TREADY_int_regslice,
        data_out => out_stream_TDATA,
        vld_out => regslice_both_out_stream_V_data_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_data_V_U_apdone_blk);

    regslice_both_out_stream_V_keep_V_U : component logistic_regression_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv4_0,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => regslice_both_out_stream_V_keep_V_U_ack_in_dummy,
        data_out => out_stream_TKEEP,
        vld_out => regslice_both_out_stream_V_keep_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_keep_V_U_apdone_blk);

    regslice_both_out_stream_V_strb_V_U : component logistic_regression_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv4_0,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => regslice_both_out_stream_V_strb_V_U_ack_in_dummy,
        data_out => out_stream_TSTRB,
        vld_out => regslice_both_out_stream_V_strb_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_strb_V_U_apdone_blk);

    regslice_both_out_stream_V_last_V_U : component logistic_regression_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_1,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => regslice_both_out_stream_V_last_V_U_ack_in_dummy,
        data_out => out_stream_TLAST,
        vld_out => regslice_both_out_stream_V_last_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    reg_1315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_1315 <= weights_Dout_A;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                reg_1315 <= weights_Dout_B;
            end if; 
        end if;
    end process;

    reg_1320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                reg_1320 <= weights_Dout_B;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                reg_1320 <= weights_Dout_A;
            end if; 
        end if;
    end process;

    reg_1325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                reg_1325 <= weights_Dout_A;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reg_1325 <= weights_Dout_B;
            end if; 
        end if;
    end process;

    reg_1330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                reg_1330 <= weights_Dout_B;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                reg_1330 <= weights_Dout_A;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                abs_linear_sum_V_reg_3142 <= abs_linear_sum_V_fu_2304_p2;
                linear_sum_V_3_reg_3135 <= linear_sum_V_3_fu_2299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln859_12_reg_3040 <= add_ln859_12_fu_2002_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln859_13_reg_3075 <= add_ln859_13_fu_2104_p2;
                partial_sums_V_25_reg_3055 <= grp_fu_843_p2(23 downto 8);
                partial_sums_V_27_reg_3060 <= grp_fu_849_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln859_17_reg_2805 <= add_ln859_17_fu_1483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln859_1_reg_3105 <= add_ln859_1_fu_2217_p2;
                mul_ln1316_30_reg_1082 <= grp_fu_844_p2;
                partial_sums_V_31_reg_3100 <= grp_fu_850_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln859_20_reg_2850 <= add_ln859_20_fu_1639_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln859_22_reg_2870 <= add_ln859_22_fu_1691_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln859_23_reg_2885 <= add_ln859_23_fu_1720_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln859_27_reg_3115 <= add_ln859_27_fu_2260_p2;
                add_ln859_6_reg_3110 <= add_ln859_6_fu_2250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln859_28_reg_3120 <= add_ln859_28_fu_2272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln859_29_reg_3125 <= add_ln859_29_fu_2281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln859_30_reg_3130 <= add_ln859_30_fu_2290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln859_5_reg_3095 <= add_ln859_5_fu_2165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln859_7_reg_2945 <= add_ln859_7_fu_1818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln859_8_reg_2985 <= add_ln859_8_fu_1847_p2;
                tmp_V_23_reg_2970 <= weights_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                icmp_ln1136_reg_3162 <= icmp_ln1136_fu_2359_p2;
                p_Result_7_reg_3168 <= probability_V_fu_2353_p2(15 downto 15);
                sub_ln1145_reg_3180 <= sub_ln1145_fu_2417_p2;
                tmp_V_35_reg_3173 <= tmp_V_35_fu_2379_p3;
                trunc_ln1144_reg_3197 <= trunc_ln1144_fu_2431_p1;
                trunc_ln1145_reg_3187 <= trunc_ln1145_fu_2423_p1;
                trunc_ln1148_reg_3192 <= trunc_ln1148_fu_2427_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                icmp_ln1159_reg_3207 <= icmp_ln1159_fu_2534_p2;
                    or_ln_i_reg_3202(0) <= or_ln_i_fu_2526_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                m_4_reg_3212 <= m_3_fu_2583_p2(63 downto 1);
                p_Result_5_reg_3217 <= m_3_fu_2583_p2(25 downto 25);
                tmp_s_reg_3222 <= m_3_fu_2583_p2(23 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                notlhs_reg_3232 <= notlhs_fu_2661_p2;
                notrhs_reg_3237 <= notrhs_fu_2667_p2;
                trunc_ln809_reg_3227 <= trunc_ln809_fu_2657_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_1335 <= grp_fu_842_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_1339 <= grp_fu_846_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_1343 <= grp_fu_845_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_1347 <= grp_fu_844_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_1351 <= grp_fu_841_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_1355 <= grp_fu_843_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_1359 <= grp_fu_848_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_1363 <= grp_fu_849_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_1367 <= grp_fu_847_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_1371 <= grp_fu_850_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_1375 <= weights_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                sdiv_ln1349_reg_3157 <= grp_fu_2344_p2;
            end if;
        end if;
    end process;
    or_ln_i_reg_3202(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state57, ap_CS_fsm_state58, regslice_both_out_stream_V_data_V_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (out_stream_TREADY_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_fu_2482_p2 <= (icmp_ln1148_fu_2476_p2 and icmp_ln1147_fu_2450_p2);
    abs_linear_sum_V_fu_2304_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(linear_sum_V_3_fu_2299_p2));
    add_ln1150_fu_2502_p2 <= std_logic_vector(unsigned(trunc_ln1145_reg_3187) + unsigned(ap_const_lv16_FFE8));
    add_ln1159_fu_2543_p2 <= std_logic_vector(unsigned(sub_ln1145_reg_3180) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln1170_fu_2632_p2 <= std_logic_vector(unsigned(sub_ln1165_fu_2627_p2) + unsigned(select_ln1144_fu_2620_p3));
    add_ln859_10_fu_1990_p2 <= std_logic_vector(unsigned(reg_1359) + unsigned(reg_1343));
    add_ln859_11_fu_1996_p2 <= std_logic_vector(unsigned(reg_1347) + unsigned(reg_1339));
    add_ln859_12_fu_2002_p2 <= std_logic_vector(unsigned(add_ln859_11_fu_1996_p2) + unsigned(add_ln859_10_fu_1990_p2));
    add_ln859_13_fu_2104_p2 <= std_logic_vector(unsigned(add_ln859_12_reg_3040) + unsigned(add_ln859_9_fu_2100_p2));
    add_ln859_14_fu_2295_p2 <= std_logic_vector(unsigned(add_ln859_13_reg_3075) + unsigned(add_ln859_6_reg_3110));
    add_ln859_15_fu_1471_p2 <= std_logic_vector(unsigned(reg_1335) + unsigned(reg_1339));
    add_ln859_16_fu_1477_p2 <= std_logic_vector(unsigned(reg_1347) + unsigned(reg_1343));
    add_ln859_17_fu_1483_p2 <= std_logic_vector(unsigned(add_ln859_16_fu_1477_p2) + unsigned(add_ln859_15_fu_1471_p2));
    add_ln859_18_fu_1627_p2 <= std_logic_vector(unsigned(reg_1355) + unsigned(reg_1351));
    add_ln859_19_fu_1633_p2 <= std_logic_vector(unsigned(reg_1363) + unsigned(reg_1359));
    add_ln859_1_fu_2217_p2 <= std_logic_vector(unsigned(reg_1343) + unsigned(reg_1367));
    add_ln859_20_fu_1639_p2 <= std_logic_vector(unsigned(add_ln859_19_fu_1633_p2) + unsigned(add_ln859_18_fu_1627_p2));
    add_ln859_21_fu_2286_p2 <= std_logic_vector(unsigned(add_ln859_20_reg_2850) + unsigned(add_ln859_17_reg_2805));
    add_ln859_22_fu_1691_p2 <= std_logic_vector(unsigned(reg_1371) + unsigned(reg_1367));
    add_ln859_23_fu_1720_p2 <= std_logic_vector(unsigned(reg_1371) + unsigned(reg_1347));
    add_ln859_24_fu_2277_p2 <= std_logic_vector(unsigned(add_ln859_23_reg_2885) + unsigned(add_ln859_22_reg_2870));
    add_ln859_25_fu_2266_p2 <= std_logic_vector(unsigned(reg_1355) + unsigned(reg_1363));
    add_ln859_26_fu_2255_p2 <= std_logic_vector(unsigned(reg_1351) + unsigned(partial_sums_V_31_reg_3100));
    add_ln859_27_fu_2260_p2 <= std_logic_vector(unsigned(add_ln859_26_fu_2255_p2) + unsigned(reg_1371));
    add_ln859_28_fu_2272_p2 <= std_logic_vector(unsigned(add_ln859_27_reg_3115) + unsigned(add_ln859_25_fu_2266_p2));
    add_ln859_29_fu_2281_p2 <= std_logic_vector(unsigned(add_ln859_28_reg_3120) + unsigned(add_ln859_24_fu_2277_p2));
    add_ln859_2_fu_2245_p2 <= std_logic_vector(unsigned(add_ln859_1_reg_3105) + unsigned(add_ln859_fu_2239_p2));
    add_ln859_30_fu_2290_p2 <= std_logic_vector(unsigned(add_ln859_29_reg_3125) + unsigned(add_ln859_21_fu_2286_p2));
    add_ln859_3_fu_2155_p2 <= std_logic_vector(unsigned(partial_sums_V_25_reg_3055) + unsigned(reg_1335));
    add_ln859_4_fu_2160_p2 <= std_logic_vector(unsigned(partial_sums_V_27_reg_3060) + unsigned(reg_1359));
    add_ln859_5_fu_2165_p2 <= std_logic_vector(unsigned(add_ln859_4_fu_2160_p2) + unsigned(add_ln859_3_fu_2155_p2));
    add_ln859_6_fu_2250_p2 <= std_logic_vector(unsigned(add_ln859_5_reg_3095) + unsigned(add_ln859_2_fu_2245_p2));
    add_ln859_7_fu_1818_p2 <= std_logic_vector(unsigned(reg_1367) + unsigned(reg_1351));
    add_ln859_8_fu_1847_p2 <= std_logic_vector(unsigned(reg_1335) + unsigned(reg_1339));
    add_ln859_9_fu_2100_p2 <= std_logic_vector(unsigned(add_ln859_8_reg_2985) + unsigned(add_ln859_7_reg_2945));
    add_ln859_fu_2239_p2 <= std_logic_vector(unsigned(partial_sums_V_30_fu_2223_p4) + unsigned(linear_sum_V_fu_2233_p2));
    and_ln1150_fu_2514_p2 <= (xor_ln1150_fu_2496_p2 and p_Result_3_fu_2507_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;

    ap_ST_fsm_state57_blk_assign_proc : process(out_stream_TREADY_int_regslice)
    begin
        if ((out_stream_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state57_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state57_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state58_blk_assign_proc : process(regslice_both_out_stream_V_data_V_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
        if (((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state58_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state58_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state58_assign_proc : process(regslice_both_out_stream_V_data_V_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
                ap_block_state58 <= ((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state58, regslice_both_out_stream_V_data_V_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
        if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state58, regslice_both_out_stream_V_data_V_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
        if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_90_fu_2680_p2 <= (grp_fu_1210_p2 and empty_fu_2676_p2);
    empty_fu_2676_p2 <= (notrhs_reg_3237 or notlhs_reg_3232);

    grp_fu_1210_ce_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state56, out_stream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (out_stream_TREADY_int_regslice = ap_const_logic_1)))) then 
            grp_fu_1210_ce <= ap_const_logic_1;
        else 
            grp_fu_1210_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1210_p0 <= trunc_ln809_reg_3227;

    grp_fu_2344_ap_start_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_2344_ap_start <= ap_const_logic_1;
        else 
            grp_fu_2344_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2344_p0 <= (linear_sum_V_3_reg_3135 & ap_const_lv8_0);

    grp_fu_841_p0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state11, sext_ln1316_8_fu_1495_p1, sext_ln1316_32_fu_1732_p1, sext_ln1316_28_fu_1950_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_841_p0 <= sext_ln1316_28_fu_1950_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_841_p0 <= sext_ln1316_32_fu_1732_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_841_p0 <= sext_ln1316_8_fu_1495_p1(16 - 1 downto 0);
        else 
            grp_fu_841_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_841_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state11, sext_ln1316_9_fu_1507_p1, sext_ln1316_33_fu_1744_p1, sext_ln1316_29_fu_1962_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_841_p1 <= sext_ln1316_29_fu_1962_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_841_p1 <= sext_ln1316_33_fu_1744_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_841_p1 <= sext_ln1316_9_fu_1507_p1(16 - 1 downto 0);
        else 
            grp_fu_841_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_842_p0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state12, sext_ln1316_fu_1385_p1, sext_ln1316_38_fu_1801_p1, sext_ln1316_48_fu_2014_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_842_p0 <= sext_ln1316_48_fu_2014_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_842_p0 <= sext_ln1316_38_fu_1801_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_842_p0 <= sext_ln1316_fu_1385_p1(16 - 1 downto 0);
        else 
            grp_fu_842_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_842_p1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state12, sext_ln1316_1_fu_1397_p1, sext_ln1316_39_fu_1813_p1, sext_ln1316_49_fu_2026_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_842_p1 <= sext_ln1316_49_fu_2026_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_842_p1 <= sext_ln1316_39_fu_1813_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_842_p1 <= sext_ln1316_1_fu_1397_p1(16 - 1 downto 0);
        else 
            grp_fu_842_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_843_p0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state9, sext_ln1316_10_fu_1518_p1, sext_ln1316_26_fu_1703_p1, sext_ln1316_50_fu_2037_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_843_p0 <= sext_ln1316_50_fu_2037_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_843_p0 <= sext_ln1316_26_fu_1703_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_843_p0 <= sext_ln1316_10_fu_1518_p1(16 - 1 downto 0);
        else 
            grp_fu_843_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_843_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state9, sext_ln1316_11_fu_1530_p1, sext_ln1316_27_fu_1715_p1, sext_ln1316_51_fu_2049_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_843_p1 <= sext_ln1316_51_fu_2049_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_843_p1 <= sext_ln1316_27_fu_1715_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_843_p1 <= sext_ln1316_11_fu_1530_p1(16 - 1 downto 0);
        else 
            grp_fu_843_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_844_p0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state14, sext_ln1316_6_fu_1454_p1, sext_ln1316_20_fu_1651_p1, sext_ln1316_46_fu_1927_p1, sext_ln1316_60_fu_2177_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_844_p0 <= sext_ln1316_60_fu_2177_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_844_p0 <= sext_ln1316_46_fu_1927_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_844_p0 <= sext_ln1316_20_fu_1651_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_844_p0 <= sext_ln1316_6_fu_1454_p1(16 - 1 downto 0);
        else 
            grp_fu_844_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_844_p1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state14, sext_ln1316_7_fu_1466_p1, sext_ln1316_21_fu_1663_p1, sext_ln1316_47_fu_1939_p1, sext_ln1316_61_fu_2189_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_844_p1 <= sext_ln1316_61_fu_2189_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_844_p1 <= sext_ln1316_47_fu_1939_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_844_p1 <= sext_ln1316_21_fu_1663_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_844_p1 <= sext_ln1316_7_fu_1466_p1(16 - 1 downto 0);
        else 
            grp_fu_844_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_845_p0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state17, sext_ln1316_4_fu_1431_p1, sext_ln1316_40_fu_1859_p1, sext_ln1316_58_fu_2138_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_845_p0 <= sext_ln1316_58_fu_2138_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_845_p0 <= sext_ln1316_40_fu_1859_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_845_p0 <= sext_ln1316_4_fu_1431_p1(16 - 1 downto 0);
        else 
            grp_fu_845_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_845_p1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state17, sext_ln1316_5_fu_1443_p1, sext_ln1316_41_fu_1871_p1, sext_ln1316_59_fu_2150_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_845_p1 <= sext_ln1316_59_fu_2150_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_845_p1 <= sext_ln1316_41_fu_1871_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_845_p1 <= sext_ln1316_5_fu_1443_p1(16 - 1 downto 0);
        else 
            grp_fu_845_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_846_p0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state12, sext_ln1316_2_fu_1408_p1, sext_ln1316_36_fu_1778_p1, sext_ln1316_44_fu_1905_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_846_p0 <= sext_ln1316_44_fu_1905_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_846_p0 <= sext_ln1316_36_fu_1778_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_846_p0 <= sext_ln1316_2_fu_1408_p1(16 - 1 downto 0);
        else 
            grp_fu_846_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_846_p1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state12, sext_ln1316_3_fu_1420_p1, sext_ln1316_37_fu_1790_p1, sext_ln1316_45_fu_1917_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_846_p1 <= sext_ln1316_45_fu_1917_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_846_p1 <= sext_ln1316_37_fu_1790_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_846_p1 <= sext_ln1316_3_fu_1420_p1(16 - 1 downto 0);
        else 
            grp_fu_846_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_847_p0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state17, ap_CS_fsm_state11, sext_ln1316_16_fu_1587_p1, sext_ln1316_34_fu_1755_p1, sext_ln1316_56_fu_2115_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_847_p0 <= sext_ln1316_56_fu_2115_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_847_p0 <= sext_ln1316_34_fu_1755_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_847_p0 <= sext_ln1316_16_fu_1587_p1(16 - 1 downto 0);
        else 
            grp_fu_847_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_847_p1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state17, ap_CS_fsm_state11, sext_ln1316_17_fu_1599_p1, sext_ln1316_35_fu_1767_p1, sext_ln1316_57_fu_2127_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_847_p1 <= sext_ln1316_57_fu_2127_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_847_p1 <= sext_ln1316_35_fu_1767_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_847_p1 <= sext_ln1316_17_fu_1599_p1(16 - 1 downto 0);
        else 
            grp_fu_847_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_848_p0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state16, sext_ln1316_12_fu_1541_p1, sext_ln1316_42_fu_1882_p1, sext_ln1316_52_fu_2060_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_848_p0 <= sext_ln1316_52_fu_2060_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_848_p0 <= sext_ln1316_42_fu_1882_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_848_p0 <= sext_ln1316_12_fu_1541_p1(16 - 1 downto 0);
        else 
            grp_fu_848_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_848_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state16, sext_ln1316_13_fu_1553_p1, sext_ln1316_43_fu_1894_p1, sext_ln1316_53_fu_2072_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_848_p1 <= sext_ln1316_53_fu_2072_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_848_p1 <= sext_ln1316_43_fu_1894_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_848_p1 <= sext_ln1316_13_fu_1553_p1(16 - 1 downto 0);
        else 
            grp_fu_848_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_849_p0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state16, sext_ln1316_14_fu_1564_p1, sext_ln1316_24_fu_1830_p1, sext_ln1316_54_fu_2083_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_849_p0 <= sext_ln1316_54_fu_2083_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_849_p0 <= sext_ln1316_24_fu_1830_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_849_p0 <= sext_ln1316_14_fu_1564_p1(16 - 1 downto 0);
        else 
            grp_fu_849_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_849_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state16, sext_ln1316_15_fu_1576_p1, sext_ln1316_25_fu_1842_p1, sext_ln1316_55_fu_2095_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_849_p1 <= sext_ln1316_55_fu_2095_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_849_p1 <= sext_ln1316_25_fu_1842_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_849_p1 <= sext_ln1316_15_fu_1576_p1(16 - 1 downto 0);
        else 
            grp_fu_849_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_850_p0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state15, sext_ln1316_18_fu_1610_p1, sext_ln1316_22_fu_1674_p1, sext_ln1316_30_fu_1973_p1, sext_ln1316_62_fu_2200_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_850_p0 <= sext_ln1316_62_fu_2200_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_850_p0 <= sext_ln1316_30_fu_1973_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_850_p0 <= sext_ln1316_22_fu_1674_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_850_p0 <= sext_ln1316_18_fu_1610_p1(16 - 1 downto 0);
        else 
            grp_fu_850_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_850_p1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state15, sext_ln1316_19_fu_1622_p1, sext_ln1316_23_fu_1686_p1, sext_ln1316_31_fu_1985_p1, sext_ln1316_63_fu_2212_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_850_p1 <= sext_ln1316_63_fu_2212_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_850_p1 <= sext_ln1316_31_fu_1985_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_850_p1 <= sext_ln1316_23_fu_1686_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_850_p1 <= sext_ln1316_19_fu_1622_p1(16 - 1 downto 0);
        else 
            grp_fu_850_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln1136_fu_2359_p2 <= "1" when (probability_V_fu_2353_p2 = ap_const_lv16_0) else "0";
    icmp_ln1147_fu_2450_p2 <= "1" when (signed(tmp_3_fu_2440_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1148_fu_2476_p2 <= "0" when (p_Result_4_fu_2471_p2 = ap_const_lv16_0) else "1";
    icmp_ln1159_fu_2534_p2 <= "1" when (signed(lsb_index_fu_2435_p2) > signed(ap_const_lv32_0)) else "0";
    
    l_fu_2409_p3_proc : process(sext_ln1244_fu_2405_p1)
    begin
        l_fu_2409_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln1244_fu_2405_p1(i) = '1' then
                l_fu_2409_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    linear_sum_V_3_fu_2299_p2 <= std_logic_vector(unsigned(add_ln859_30_reg_3130) + unsigned(add_ln859_14_fu_2295_p2));
    linear_sum_V_4_fu_2317_p3 <= 
        abs_linear_sum_V_reg_3142 when (tmp_1_fu_2310_p3(0) = '1') else 
        linear_sum_V_3_reg_3135;
    linear_sum_V_fu_2233_p2 <= std_logic_vector(shift_left(unsigned(reg_1315),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    lsb_index_fu_2435_p2 <= std_logic_vector(unsigned(sub_ln1145_reg_3180) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln1148_fu_2465_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln1148_fu_2461_p1(16-1 downto 0)))));
    lshr_ln1159_fu_2552_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1158_fu_2540_p1),to_integer(unsigned('0' & zext_ln1159_fu_2548_p1(31-1 downto 0)))));
    m_2_fu_2573_p3 <= 
        lshr_ln1159_fu_2552_p2 when (icmp_ln1159_reg_3207(0) = '1') else 
        shl_ln1160_fu_2567_p2;
    m_3_fu_2583_p2 <= std_logic_vector(unsigned(m_2_fu_2573_p3) + unsigned(zext_ln1162_fu_2580_p1));
    notlhs_fu_2661_p2 <= "0" when (add_ln1170_fu_2632_p2 = ap_const_lv8_FF) else "1";
    notrhs_fu_2667_p2 <= "1" when (tmp_s_reg_3222 = ap_const_lv23_0) else "0";
    or_ln1136_fu_2693_p2 <= (icmp_ln1136_reg_3162 or empty_90_fu_2680_p2);
    or_ln1150_fu_2520_p2 <= (and_ln1150_fu_2514_p2 or a_fu_2482_p2);
    or_ln_i_fu_2526_p3 <= (ap_const_lv1_0 & or_ln1150_fu_2520_p2);

    out_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state58, out_stream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            out_stream_TDATA_blk_n <= out_stream_TREADY_int_regslice;
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln60_fu_2706_p1),32));
    out_stream_TVALID <= regslice_both_out_stream_V_data_V_U_vld_out;

    out_stream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state57, out_stream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) and (out_stream_TREADY_int_regslice = ap_const_logic_1))) then 
            out_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    output_pkt_data_V_fu_2698_p3 <= 
        select_ln1136_fu_2686_p3 when (or_ln1136_fu_2693_p2(0) = '1') else 
        ap_const_lv24_0;
    p_Result_3_fu_2507_p3 <= tmp_V_35_reg_3173(to_integer(unsigned(add_ln1150_fu_2502_p2)) downto to_integer(unsigned(add_ln1150_fu_2502_p2))) when (to_integer(unsigned(add_ln1150_fu_2502_p2)) >= 0 and to_integer(unsigned(add_ln1150_fu_2502_p2)) <=15) else "-";
    p_Result_4_fu_2471_p2 <= (tmp_V_35_reg_3173 and lshr_ln1148_fu_2465_p2);
    p_Result_7_fu_2365_p3 <= probability_V_fu_2353_p2(15 downto 15);
    p_Result_8_fu_2397_p3 <= (ap_const_lv1_1 & p_Result_s_fu_2387_p4);
    p_Result_9_fu_2645_p5 <= (zext_ln1163_fu_2617_p1(63 downto 32) & tmp_1_i_fu_2638_p3 & zext_ln1163_fu_2617_p1(22 downto 0));
    
    p_Result_s_fu_2387_p4_proc : process(tmp_V_35_fu_2379_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_s_fu_2387_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_35_fu_2379_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_s_fu_2387_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_s_fu_2387_p4_i) := tmp_V_35_fu_2379_p3(16-1-p_Result_s_fu_2387_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_2387_p4 <= resvalue(16-1 downto 0);
    end process;

    partial_sums_V_30_fu_2223_p4 <= mul_ln1316_30_reg_1082(23 downto 8);
    probability_V_fu_2353_p2 <= std_logic_vector(unsigned(trunc_ln859_fu_2350_p1) + unsigned(ap_const_lv16_80));
    r_V_10_fu_1645_p2 <= std_logic_vector(shift_left(unsigned(reg_1315),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_11_fu_1668_p2 <= std_logic_vector(shift_left(unsigned(reg_1320),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_12_fu_1824_p2 <= std_logic_vector(shift_left(unsigned(reg_1315),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_13_fu_1697_p2 <= std_logic_vector(shift_left(unsigned(reg_1320),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_14_fu_1944_p2 <= std_logic_vector(shift_left(unsigned(reg_1320),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_15_fu_1967_p2 <= std_logic_vector(shift_left(unsigned(reg_1325),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_16_fu_1726_p2 <= std_logic_vector(shift_left(unsigned(reg_1330),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_17_fu_1749_p2 <= std_logic_vector(shift_left(unsigned(reg_1375),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_18_fu_1772_p2 <= std_logic_vector(shift_left(unsigned(reg_1330),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_19_fu_1795_p2 <= std_logic_vector(shift_left(unsigned(reg_1375),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_1_fu_1402_p2 <= std_logic_vector(shift_left(unsigned(reg_1320),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_20_fu_1853_p2 <= std_logic_vector(shift_left(unsigned(reg_1330),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_21_fu_1876_p2 <= std_logic_vector(shift_left(unsigned(reg_1375),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_22_fu_1899_p2 <= std_logic_vector(shift_left(unsigned(reg_1315),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_23_fu_1922_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_23_reg_2970),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_24_fu_2008_p2 <= std_logic_vector(shift_left(unsigned(reg_1315),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_25_fu_2031_p2 <= std_logic_vector(shift_left(unsigned(reg_1330),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_26_fu_2054_p2 <= std_logic_vector(shift_left(unsigned(reg_1320),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_27_fu_2077_p2 <= std_logic_vector(shift_left(unsigned(reg_1325),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_28_fu_2109_p2 <= std_logic_vector(shift_left(unsigned(reg_1315),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_29_fu_2132_p2 <= std_logic_vector(shift_left(unsigned(reg_1320),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_2_fu_1425_p2 <= std_logic_vector(shift_left(unsigned(reg_1325),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_30_fu_2171_p2 <= std_logic_vector(shift_left(unsigned(reg_1315),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_31_fu_2194_p2 <= std_logic_vector(shift_left(unsigned(reg_1320),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_3_fu_1448_p2 <= std_logic_vector(shift_left(unsigned(reg_1330),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_4_fu_1489_p2 <= std_logic_vector(shift_left(unsigned(reg_1315),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_5_fu_1512_p2 <= std_logic_vector(shift_left(unsigned(reg_1320),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_6_fu_1535_p2 <= std_logic_vector(shift_left(unsigned(reg_1325),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_7_fu_1558_p2 <= std_logic_vector(shift_left(unsigned(reg_1330),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_8_fu_1581_p2 <= std_logic_vector(shift_left(unsigned(reg_1315),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_9_fu_1604_p2 <= std_logic_vector(shift_left(unsigned(reg_1320),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    r_V_fu_1379_p2 <= std_logic_vector(shift_left(unsigned(reg_1315),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    ret_V_fu_2327_p2 <= std_logic_vector(signed(sext_ln859_fu_2323_p1) + signed(ap_const_lv17_400));
    select_ln1136_fu_2686_p3 <= 
        ap_const_lv24_0 when (icmp_ln1136_reg_3162(0) = '1') else 
        ap_const_lv24_800000;
    select_ln1144_fu_2620_p3 <= 
        ap_const_lv8_7F when (p_Result_5_reg_3217(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln1244_fu_2405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_8_fu_2397_p3),32));

        sext_ln1316_10_fu_1518_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_1512_p2),24));

        sext_ln1316_11_fu_1530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_5_fu_1523_p3),24));

        sext_ln1316_12_fu_1541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_6_fu_1535_p2),24));

        sext_ln1316_13_fu_1553_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_6_fu_1546_p3),24));

        sext_ln1316_14_fu_1564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_7_fu_1558_p2),24));

        sext_ln1316_15_fu_1576_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_7_fu_1569_p3),24));

        sext_ln1316_16_fu_1587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_8_fu_1581_p2),24));

        sext_ln1316_17_fu_1599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_8_fu_1592_p3),24));

        sext_ln1316_18_fu_1610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_9_fu_1604_p2),24));

        sext_ln1316_19_fu_1622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_9_fu_1615_p3),24));

        sext_ln1316_1_fu_1397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_1390_p3),24));

        sext_ln1316_20_fu_1651_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_10_fu_1645_p2),24));

        sext_ln1316_21_fu_1663_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_s_fu_1656_p3),24));

        sext_ln1316_22_fu_1674_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_11_fu_1668_p2),24));

        sext_ln1316_23_fu_1686_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_10_fu_1679_p3),24));

        sext_ln1316_24_fu_1830_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_12_fu_1824_p2),24));

        sext_ln1316_25_fu_1842_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_11_fu_1835_p3),24));

        sext_ln1316_26_fu_1703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_13_fu_1697_p2),24));

        sext_ln1316_27_fu_1715_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_12_fu_1708_p3),24));

        sext_ln1316_28_fu_1950_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_14_fu_1944_p2),24));

        sext_ln1316_29_fu_1962_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_13_fu_1955_p3),24));

        sext_ln1316_2_fu_1408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_1402_p2),24));

        sext_ln1316_30_fu_1973_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_15_fu_1967_p2),24));

        sext_ln1316_31_fu_1985_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_14_fu_1978_p3),24));

        sext_ln1316_32_fu_1732_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_16_fu_1726_p2),24));

        sext_ln1316_33_fu_1744_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_15_fu_1737_p3),24));

        sext_ln1316_34_fu_1755_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_17_fu_1749_p2),24));

        sext_ln1316_35_fu_1767_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_16_fu_1760_p3),24));

        sext_ln1316_36_fu_1778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_18_fu_1772_p2),24));

        sext_ln1316_37_fu_1790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_17_fu_1783_p3),24));

        sext_ln1316_38_fu_1801_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_19_fu_1795_p2),24));

        sext_ln1316_39_fu_1813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_18_fu_1806_p3),24));

        sext_ln1316_3_fu_1420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_1_fu_1413_p3),24));

        sext_ln1316_40_fu_1859_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_20_fu_1853_p2),24));

        sext_ln1316_41_fu_1871_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_19_fu_1864_p3),24));

        sext_ln1316_42_fu_1882_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_21_fu_1876_p2),24));

        sext_ln1316_43_fu_1894_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_20_fu_1887_p3),24));

        sext_ln1316_44_fu_1905_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_22_fu_1899_p2),24));

        sext_ln1316_45_fu_1917_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_21_fu_1910_p3),24));

        sext_ln1316_46_fu_1927_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_23_fu_1922_p2),24));

        sext_ln1316_47_fu_1939_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_22_fu_1932_p3),24));

        sext_ln1316_48_fu_2014_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_24_fu_2008_p2),24));

        sext_ln1316_49_fu_2026_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_23_fu_2019_p3),24));

        sext_ln1316_4_fu_1431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_fu_1425_p2),24));

        sext_ln1316_50_fu_2037_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_25_fu_2031_p2),24));

        sext_ln1316_51_fu_2049_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_24_fu_2042_p3),24));

        sext_ln1316_52_fu_2060_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_26_fu_2054_p2),24));

        sext_ln1316_53_fu_2072_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_25_fu_2065_p3),24));

        sext_ln1316_54_fu_2083_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_27_fu_2077_p2),24));

        sext_ln1316_55_fu_2095_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_26_fu_2088_p3),24));

        sext_ln1316_56_fu_2115_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_28_fu_2109_p2),24));

        sext_ln1316_57_fu_2127_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_27_fu_2120_p3),24));

        sext_ln1316_58_fu_2138_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_29_fu_2132_p2),24));

        sext_ln1316_59_fu_2150_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_28_fu_2143_p3),24));

        sext_ln1316_5_fu_1443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_2_fu_1436_p3),24));

        sext_ln1316_60_fu_2177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_30_fu_2171_p2),24));

        sext_ln1316_61_fu_2189_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_29_fu_2182_p3),24));

        sext_ln1316_62_fu_2200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_31_fu_2194_p2),24));

        sext_ln1316_63_fu_2212_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_30_fu_2205_p3),24));

        sext_ln1316_6_fu_1454_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_fu_1448_p2),24));

        sext_ln1316_7_fu_1466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_3_fu_1459_p3),24));

        sext_ln1316_8_fu_1495_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_4_fu_1489_p2),24));

        sext_ln1316_9_fu_1507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln884_4_fu_1500_p3),24));

        sext_ln1316_fu_1385_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_1379_p2),24));

        sext_ln60_fu_2706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_pkt_data_V_fu_2698_p3),30));

        sext_ln859_fu_2323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(linear_sum_V_4_fu_2317_p3),17));

    shl_ln1160_fu_2567_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1158_fu_2540_p1),to_integer(unsigned('0' & zext_ln1160_fu_2563_p1(31-1 downto 0)))));
    shl_ln884_10_fu_1679_p3 <= (p_read11 & ap_const_lv8_0);
    shl_ln884_11_fu_1835_p3 <= (p_read12 & ap_const_lv8_0);
    shl_ln884_12_fu_1708_p3 <= (p_read13 & ap_const_lv8_0);
    shl_ln884_13_fu_1955_p3 <= (p_read14 & ap_const_lv8_0);
    shl_ln884_14_fu_1978_p3 <= (p_read15 & ap_const_lv8_0);
    shl_ln884_15_fu_1737_p3 <= (p_read16 & ap_const_lv8_0);
    shl_ln884_16_fu_1760_p3 <= (p_read17 & ap_const_lv8_0);
    shl_ln884_17_fu_1783_p3 <= (p_read18 & ap_const_lv8_0);
    shl_ln884_18_fu_1806_p3 <= (p_read19 & ap_const_lv8_0);
    shl_ln884_19_fu_1864_p3 <= (p_read20 & ap_const_lv8_0);
    shl_ln884_1_fu_1413_p3 <= (p_read1 & ap_const_lv8_0);
    shl_ln884_20_fu_1887_p3 <= (p_read21 & ap_const_lv8_0);
    shl_ln884_21_fu_1910_p3 <= (p_read22 & ap_const_lv8_0);
    shl_ln884_22_fu_1932_p3 <= (p_read23 & ap_const_lv8_0);
    shl_ln884_23_fu_2019_p3 <= (p_read24 & ap_const_lv8_0);
    shl_ln884_24_fu_2042_p3 <= (p_read25 & ap_const_lv8_0);
    shl_ln884_25_fu_2065_p3 <= (p_read26 & ap_const_lv8_0);
    shl_ln884_26_fu_2088_p3 <= (p_read27 & ap_const_lv8_0);
    shl_ln884_27_fu_2120_p3 <= (p_read28 & ap_const_lv8_0);
    shl_ln884_28_fu_2143_p3 <= (p_read29 & ap_const_lv8_0);
    shl_ln884_29_fu_2182_p3 <= (p_read30 & ap_const_lv8_0);
    shl_ln884_2_fu_1436_p3 <= (p_read2 & ap_const_lv8_0);
    shl_ln884_30_fu_2205_p3 <= (p_read31 & ap_const_lv8_0);
    shl_ln884_3_fu_1459_p3 <= (p_read3 & ap_const_lv8_0);
    shl_ln884_4_fu_1500_p3 <= (p_read4 & ap_const_lv8_0);
    shl_ln884_5_fu_1523_p3 <= (p_read5 & ap_const_lv8_0);
    shl_ln884_6_fu_1546_p3 <= (p_read6 & ap_const_lv8_0);
    shl_ln884_7_fu_1569_p3 <= (p_read7 & ap_const_lv8_0);
    shl_ln884_8_fu_1592_p3 <= (p_read8 & ap_const_lv8_0);
    shl_ln884_9_fu_1615_p3 <= (p_read9 & ap_const_lv8_0);
    shl_ln884_s_fu_1656_p3 <= (p_read10 & ap_const_lv8_0);
    shl_ln_fu_1390_p3 <= (p_read & ap_const_lv8_0);
    sub_ln1145_fu_2417_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_fu_2409_p3));
    sub_ln1148_fu_2456_p2 <= std_logic_vector(unsigned(ap_const_lv5_9) - unsigned(trunc_ln1148_reg_3192));
    sub_ln1160_fu_2558_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln1145_reg_3180));
    sub_ln1165_fu_2627_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) - unsigned(trunc_ln1144_reg_3197));
    tmp_1_fu_2310_p3 <= linear_sum_V_3_reg_3135(15 downto 15);
    tmp_1_i_fu_2638_p3 <= (p_Result_7_reg_3168 & add_ln1170_fu_2632_p2);
    tmp_3_fu_2440_p4 <= lsb_index_fu_2435_p2(31 downto 1);
    tmp_4_fu_2488_p3 <= lsb_index_fu_2435_p2(31 downto 31);
    tmp_V_33_fu_2373_p2 <= std_logic_vector(signed(ap_const_lv16_FF80) - signed(trunc_ln859_fu_2350_p1));
    tmp_V_35_fu_2379_p3 <= 
        tmp_V_33_fu_2373_p2 when (p_Result_7_fu_2365_p3(0) = '1') else 
        probability_V_fu_2353_p2;
    trunc_ln1144_fu_2431_p1 <= l_fu_2409_p3(8 - 1 downto 0);
    trunc_ln1145_fu_2423_p1 <= sub_ln1145_fu_2417_p2(16 - 1 downto 0);
    trunc_ln1148_fu_2427_p1 <= sub_ln1145_fu_2417_p2(5 - 1 downto 0);
    trunc_ln809_fu_2657_p1 <= p_Result_9_fu_2645_p5(32 - 1 downto 0);
    trunc_ln859_fu_2350_p1 <= sdiv_ln1349_reg_3157(16 - 1 downto 0);
    weights_Addr_A <= std_logic_vector(shift_left(unsigned(weights_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    weights_Addr_A_orig_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            weights_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_Addr_A_orig <= ap_const_lv64_20(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_Addr_A_orig <= ap_const_lv64_1E(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            weights_Addr_A_orig <= ap_const_lv64_1C(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weights_Addr_A_orig <= ap_const_lv64_1A(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weights_Addr_A_orig <= ap_const_lv64_18(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weights_Addr_A_orig <= ap_const_lv64_16(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weights_Addr_A_orig <= ap_const_lv64_14(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            weights_Addr_A_orig <= ap_const_lv64_12(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_Addr_A_orig <= ap_const_lv64_10(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weights_Addr_A_orig <= ap_const_lv64_E(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights_Addr_A_orig <= ap_const_lv64_C(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_Addr_A_orig <= ap_const_lv64_A(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_Addr_A_orig <= ap_const_lv64_8(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_Addr_A_orig <= ap_const_lv64_6(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weights_Addr_A_orig <= ap_const_lv64_4(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            weights_Addr_A_orig <= ap_const_lv64_2(32 - 1 downto 0);
        else 
            weights_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    weights_Addr_B <= std_logic_vector(shift_left(unsigned(weights_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    weights_Addr_B_orig_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_Addr_B_orig <= ap_const_lv64_1F(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_Addr_B_orig <= ap_const_lv64_1D(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            weights_Addr_B_orig <= ap_const_lv64_1B(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weights_Addr_B_orig <= ap_const_lv64_19(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weights_Addr_B_orig <= ap_const_lv64_17(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weights_Addr_B_orig <= ap_const_lv64_15(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weights_Addr_B_orig <= ap_const_lv64_13(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            weights_Addr_B_orig <= ap_const_lv64_11(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_Addr_B_orig <= ap_const_lv64_F(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weights_Addr_B_orig <= ap_const_lv64_D(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights_Addr_B_orig <= ap_const_lv64_B(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_Addr_B_orig <= ap_const_lv64_9(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_Addr_B_orig <= ap_const_lv64_7(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_Addr_B_orig <= ap_const_lv64_5(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weights_Addr_B_orig <= ap_const_lv64_3(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            weights_Addr_B_orig <= ap_const_lv64_1(32 - 1 downto 0);
        else 
            weights_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    weights_Din_A <= ap_const_lv16_0;
    weights_Din_B <= ap_const_lv16_0;

    weights_EN_A_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            weights_EN_A <= ap_const_logic_1;
        else 
            weights_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    weights_EN_B_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            weights_EN_B <= ap_const_logic_1;
        else 
            weights_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    weights_WEN_A <= ap_const_lv2_0;
    weights_WEN_B <= ap_const_lv2_0;
    xor_ln1150_fu_2496_p2 <= (tmp_4_fu_2488_p3 xor ap_const_lv1_1);
    zext_ln1148_fu_2461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1148_fu_2456_p2),16));
    zext_ln1158_fu_2540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_35_reg_3173),64));
    zext_ln1159_fu_2548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1159_fu_2543_p2),64));
    zext_ln1160_fu_2563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1160_fu_2558_p2),64));
    zext_ln1162_fu_2580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_i_reg_3202),64));
    zext_ln1163_fu_2617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_4_reg_3212),64));
end behav;
